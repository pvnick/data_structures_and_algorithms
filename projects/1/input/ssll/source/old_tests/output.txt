Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[kingdom,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[do]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[do]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[do]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Egypt]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Egypt]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Egypt]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[Egypt,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[Egypt,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[Egypt,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[shall,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[shall,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[shall,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[shall,ye,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[shall,ye,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[shall,ye,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[and,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,shall,him,,send]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,shall,him,,send]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,shall,him,,send]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,shall,him,,send]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,shall,him,,send]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,shall,him,,send]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,shall,him,,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,shall,him,,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,shall,him,,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[shall,him,,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[shall,him,,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[shall,him,,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[died,certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[died,certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[died,certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[died,certain,shall,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[died,certain,shall,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[died,certain,shall,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[died,certain,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[died,certain,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[died,certain,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[14:51,died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[14:51,died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[14:51,died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[14:51,died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[14:51,died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[14:51,died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[14:51,died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[14:51,died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[14:51,died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[died,certain,house,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[died,certain]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,certain]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,certain]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,certain]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[life:,died]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[life:,died]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[life:,died]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[life:,died,famines,,bottles]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life:,died,famines,,bottles]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[a,life:,died,famines,,bottles]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[God,a,life:,died,famines,,bottles]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[a,life:,died,famines,,bottles]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[a,life:,died,famines,,bottles]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[a,life:,died,famines,,name,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[a,life:,died,famines,,name,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[a,life:,died,famines,,name,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[a,life:,died,famines,,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[a,life:,died,famines,,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[a,life:,died,famines,,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[a,life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[a,life:,died,famines,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[a,life:,died,famines,,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,a,life:,died,famines,,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[a,life:,died,famines,,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[a,life:,died,famines,,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[life:,died,famines,,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[life:,died,famines,,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[life:,died,famines,,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[shall,life:,died,famines,,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[shall,life:,died,famines,,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[shall,life:,died,famines,,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[shall,life:,died,famines,,should,my,called]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[life:,died,famines,,should,my,called]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[life:,died,famines,,should,my,called,country,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[life:,died,famines,,should,my,called,country,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[life:,died,famines,,should,my,called,country,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[died,famines,,should,my,called,country,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[died,famines,,should,my,called,country,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[died,famines,,should,my,called,country,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[died,famines,,should,my,called,country,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[died,famines,,should,my,called,country,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[died,famines,,should,my,called,country,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[died,famines,,should,my,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[died,famines,,should,my,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[died,famines,,should,my,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[famines,,should,my,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[famines,,should,my,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[famines,,should,my,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[synagogue:,famines,,should,my,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[synagogue:,famines,,should,my,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[synagogue:,famines,,should,my,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[synagogue:,famines,,should,my,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[synagogue:,famines,,should,my,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[synagogue:,famines,,should,my,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[will,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[will,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[will,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[will,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[will,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[will,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[kneeling,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[kneeling,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[kneeling,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[kneeling,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kneeling,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kneeling,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[thou,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[thou,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[thou,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[thou,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[thou,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[thou,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[I,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[be,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[be,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[be,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[kingdom,,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[kingdom,,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[kingdom,,a,synagogue:,famines,,should,my,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[kingdom,,a,synagogue:,famines,,should,saying,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[kingdom,,a,synagogue:,famines,,should,saying,called,country,,away,these,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[kingdom,,a,synagogue:,famines,,should,saying,called,country,,away,these,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[kingdom,,a,synagogue:,famines,,should,saying,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[kingdom,,a,synagogue:,famines,,should,saying,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[kingdom,,a,synagogue:,famines,,should,saying,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[kingdom,,a,synagogue:,famines,,should,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,,a,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[answered,kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[answered,kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[answered,kingdom,,speak,synagogue:,famines,,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away,these,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[said,answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,should,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years,him:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,22:22,called,country,,away,years,him:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[answered,kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[kingdom,,speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years,him:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[speak,synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[synagogue:,famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away,years]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,called,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,him,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[famines,,devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[devil;,of,clearly.,Siloam,house.,country,,away]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[devil;,of,clearly.,Siloam,house.,country,,away,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[devil;,of,clearly.,Siloam,house.,country,,away,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[devil;,of,clearly.,Siloam,house.,country,,away,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,devil;,of,clearly.,Siloam,house.,country,,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[of,devil;,of,clearly.,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[of,devil;,of,clearly.,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[of,devil;,of,clearly.,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two,baskets]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two,baskets]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two,baskets]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[of,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[1:12,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[1:12,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[1:12,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[1:12,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[1:12,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[1:12,devil;,of,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[1:12,devil;,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[1:12,devil;,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[1:12,devil;,Siloam,house.,country,,Now,he,two,baskets,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,diseases]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[and,1:12,devil;,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[and,1:12,God,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[and,1:12,God,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[and,1:12,God,Siloam,house.,country,,Now,he,two,which,13:10]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[and,1:12,God,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[and,1:12,God,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[and,1:12,God,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[drinking,and,whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[drinking,and,whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[drinking,and,whose,1:12,God,Siloam,house.,country,,Now,he,two,which,swords,place]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[drinking,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords,place]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[drinking,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords,place]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[drinking,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords,place]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[drinking,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[drinking,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[drinking,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[the,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[the,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[the,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[the,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[the,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[the,and,whose,1:12,God,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which,swords]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[and,whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[whose,1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[1:12,God,on,Siloam,house.,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[1:12,God,on,Siloam,house.,son,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[1:12,God,on,Siloam,house.,son,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[1:12,God,on,Siloam,house.,son,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[God,on,Siloam,house.,son,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[God,on,Siloam,house.,son,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[God,on,Siloam,house.,son,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two,so]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two,so]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two,so]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,sea,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,he,Now,he,two]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,he,Now,he,two]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,ruler,he,Now,he,two]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[God,on,Siloam,house.,son,ruler,he,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[God,on,Siloam,house.,son,ruler,he,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[God,on,Siloam,house.,son,ruler,he,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[God,on,Siloam,house.,son,ruler,he,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[God,on,Siloam,house.,son,ruler,he,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[God,on,Siloam,house.,son,ruler,he,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,should,ruler,he,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,should,ruler,he,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[God,on,Siloam,house.,son,should,ruler,he,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[on,Siloam,house.,son,should,ruler,he,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[on,Siloam,house.,son,should,ruler,he,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[on,Siloam,house.,son,should,ruler,he,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[on,Siloam,house.,son,should,ruler,scribes,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[on,Siloam,house.,son,should,ruler,scribes,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[on,Siloam,house.,son,should,ruler,scribes,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[of,on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[of,on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[of,on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[on,Siloam,house.,son,should,received,better,ruler,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[the,on,Siloam,house.,son,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,sister,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[her,the,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,he,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[her,the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[the,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[should,on,Siloam,house.,son,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[should,on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[should,on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[should,on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[should,on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[should,on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[should,on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[on,Siloam,house.,son,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[on,Siloam,house.,and,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,come,,fast,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,fast,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[on,Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[on,Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,scribes,Now,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Siloam,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[the,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[the,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[the,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[the,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[the,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[the,house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[house.,come,,Jesus,noised,the,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[house.,come,,Jesus,noised,the,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[house.,come,,Jesus,noised,the,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[house.,come,,Jesus,noised,the,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[house.,come,,Jesus,noised,the,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[house.,come,,Jesus,noised,the,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[house.,come,,Jesus,noised,the,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His,sheep]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His,sheep]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His,sheep]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,This,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,with,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2,His]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2,His]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2,His]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[this,said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[said,house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house,28:2]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[house.,come,,Jesus,come.,noised,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[ye,and,house.,come,,Jesus,come.,noised,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better,Now]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,the,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better,other]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better,other]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better,other]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better,other]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better,other]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better,other]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,brother,,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[regarded,ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,went,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received,better]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,Jesus,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should,received]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[ye,and,house.,come,,men,answered,come.,saw,is,took,in,should]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[unto,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[unto,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[unto,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[doeth,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[doeth,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[doeth,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[doeth,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[doeth,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[doeth,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[he,called]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[he,called]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[he,called]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[others,he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[others,he,called,multitude]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[others,he,called,evil]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[others,he,called,evil]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[others,he,called,evil]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[others,he,called,evil]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[others,he,called,evil]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[others,he,called,evil]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[others,he,called,evil]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[others,he,called,evil]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[others,he,called,evil]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[king,,others,he,called,evil]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[king,,others,he,called,evil]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[king,,others,he,called,evil]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[he,king,,others,he,called,evil]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[he,king,,others,he,called,evil]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[he,king,,others,he,called,evil]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[king,,others,he,called,evil]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[king,,others,he,called,evil]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[king,,others,he,called,evil]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[king,,others,he,called,evil]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[king,,others,he,called,evil]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[king,,others,he,called,evil]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[king,,others,he,called,evil,me.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[king,,others,he,called,evil,me.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[king,,others,he,called,evil,me.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[king,,others,he,called,evil,me.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[king,,others,he,called,evil,me.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[king,,others,he,called,evil,me.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[king,,others,he,called,evil,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[king,,others,he,called,evil,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[king,,others,he,called,evil,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[king,,others,the,called,evil,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[king,,others,the,called,evil,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[king,,others,the,called,evil,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[king,,others,the,called,evil,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[king,,others,the,called,evil,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[king,,others,the,called,evil,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[which,king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[king,,others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[a,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[a,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[a,others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[a,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[a,others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[a,others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[a,others,the,called,candle,,give:,come,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[a,others,the,called,candle,,give:,come,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[a,others,the,called,candle,,give:,come,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[a,others,the,called,candle,,give:,come,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[a,others,the,called,candle,,give:,come,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[a,others,the,called,candle,,give:,come,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[others,the,called,candle,,give:,come,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[others,the,called,candle,,give:,come,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[others,the,called,candle,,give:,come,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[others,the,called,candle,,give:,come,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[others,the,called,candle,,give:,come,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[others,the,called,candle,,give:,come,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[others,the,called,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[others,the,called,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[others,the,of,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[ye,saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[saying,,others,the,of,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[others,the,of,candle,,give:,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[others,the,of,candle,,give:,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[others,the,of,candle,,give:,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[others,the,of,candle,,give:,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[others,the,of,candle,,give:,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[the,of,candle,,give:,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[the,of,candle,,give:,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[the,of,candle,,give:,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[drink.,the,of,candle,,give:,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[drink.,the,of,candle,,give:,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[drink.,the,of,candle,,give:,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[drink.,the,of,candle,,give:,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,servants,,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[drink.,the,of,candle,,give:,if,servants,,forbid,come,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[drink.,the,of,candle,,give:,if,servants,,forbid,come,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[drink.,the,of,candle,,give:,if,servants,,forbid,come,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[drink.,the,of,candle,,give:,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[drink.,the,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[drink.,the,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[drink.,the,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[drink.,the,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[drink.,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[also,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[also,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[also,not,of,candle,,give:,or,if,servants,,forbid,come]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[yet,also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[yet,also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[yet,also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[yet,also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[yet,also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[yet,also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[also,not,of,candle,,give:,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[also,not,of,candle,,give:,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[also,not,of,candle,,give:,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[also,not,of,candle,,give:,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[also,not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[not,of,candle,,give:,27:16,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[not,of,candle,,give:,27:16,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[not,of,candle,,give:,27:16,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[not,of,candle,,give:,27:16,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[were,not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[were,not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[were,not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[were,not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[were,not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[were,not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,of,candle,,give:,27:16,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,when,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,,forbid]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,give:,27:16,and,room,give,me,and,or,if,servants,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,and,room,give,me,and,or,if,servants,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,and,room,give,me,and,or,if,servants,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,and,room,give,me,and,or,if,servants,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if,servants,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if,servants,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if,servants,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,of,candle,,disciples,,27:16,and,he,,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,27:16,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,he,,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,23:34,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,23:34,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,23:34,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,of,candle,,disciples,,which,after,and,23:34,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,of,candle,,disciples,,which,after,and,23:34,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,of,candle,,disciples,,which,after,and,23:34,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,of,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if,not.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[knew,candle,,disciples,,which,after,and,seeds:,give,me,and,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,and,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,and,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,and,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,and,or,their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,and,or,their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,and,or,their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[knew,come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[come.,disciples,,which,after,and,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[mother,come.,disciples,,which,after,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[mother,come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[mother,come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[mother,come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,give,me,or,their,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,them,,me,or,their,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,them,,me,or,their,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,them,,me,or,their,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[come.,disciples,,which,after,with,and,unto,seeds:,them,,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[come.,disciples,,which,after,with,and,unto,seeds:,them,,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[come.,disciples,,which,after,with,and,unto,seeds:,them,,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,their,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[come.,disciples,,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[in,come.,disciples,,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[in,come.,disciples,,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[in,come.,disciples,,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[in,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[in,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[in,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[in,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[in,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[in,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[asked,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[asked,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[asked,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren,mercy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[asked,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[asked,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[asked,come.,which,after,with,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,asked,come.,which,after,with,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[asked,come.,which,after,my,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[asked,come.,which,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,ye,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,brethren]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[who,not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[not,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they,receive]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,after,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,unto,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[Which,of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[Which,of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[Which,of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[of,Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Thus,this,asked,come.,11:13,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,me,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[remained,Thus,this,asked,come.,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,good,,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,remained,Thus,this,asked,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,may]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[ye,remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[remained,Thus,this,asked,life,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[remained,Thus,this,asked,life,came,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[remained,Thus,this,asked,life,came,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[remained,Thus,this,asked,life,came,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,come.,him,11:13,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,come.,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,come.,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,come.,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[remained,Thus,this,asked,life,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[remained,Thus,this,asked,life,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[remained,Thus,this,asked,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[remained,Thus,this,asked,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[remained,Thus,this,asked,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[remained,Thus,this,asked,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[remained,Thus,this,asked,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[remained,Thus,this,asked,7:42,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[remained,Thus,this,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[remained,Thus,this,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[remained,Thus,this,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[remained,Thus,this,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[remained,Thus,this,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[remained,Thus,this,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[remained,Thus,asked,7:42,Father,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[remained,Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Thus,asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[asked,7:42,Father,the,came,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[Christ;,that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[Christ;,that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[Christ;,that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,do]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[Christ;,that,asked,7:42,Father,in,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Christ;,that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[that,asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me,ground,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,say,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[we,asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[we,asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[we,asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[we,asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[we,asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[we,asked,7:42,Father,the,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,they,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[Peter,we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[we,asked,7:42,Father,the,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,asked,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[unto,own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[unto,own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[unto,own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,come,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,day,,came,But,see,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[own,7:42,Father,the,accuse,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[own,7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[own,7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[7:42,Father,the,accuse,did,,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[7:42,Father,the,accuse,did,,up,ye,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[7:42,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[7:42,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[7:42,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,in,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[say,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[we,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[we,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[we,Father,the,accuse,did,,up,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,and,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,the,accuse,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,the,him,,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,the,him,,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,the,him,,did,,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,the,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,Peter's,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,Peter's,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,Peter's,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[we,Father,Peter's,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,did,,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[24:20,we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[24:20,we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[24:20,we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[24:20,we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[24:20,we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[24:20,we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These,if]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,not,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,not,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[we,Father,Peter's,him,,by,not,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,These]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,a,things,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,a,of,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,a,of,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,a,of,day,,came,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,But,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[we,Father,Peter's,him,,by,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,by,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,Peter's,him,,by,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,by,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,Jews;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[set,we,Father,Peter's,him,,commandments,,of,a,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.,do?]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.,do?]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.,do?]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.,do?]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.,do?]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.,do?]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,to,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[the,set,we,Father,Peter's,him,,commandments,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,him.,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[the,set,we,Father,Peter's,him,,of,came,of,day,,For,Where,him,of,judgment,seeds:,or,me,Jordan,,of,whom,souls.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[What]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[What]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[What]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[What]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[What]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[What]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[What]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[marrieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[marrieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[marrieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[after,marrieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[after,marrieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[after,marrieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[after,marrieth,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[after,marrieth,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[after,marrieth,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[after,marrieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[after,marrieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[after,marrieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[after,marrieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[after]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[after]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[after]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[after]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[after]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[after]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[spoken]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[spoken]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[spoken]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[day.,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[day.,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[day.,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[8:5,day.,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[8:5,day.,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[8:5,day.,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[day.,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[day.,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[day.,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[day.,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[day.,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[day.,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[day.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[day.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[day.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[day.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[day.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[day.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[day.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[day.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[day.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[day.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[day.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[day.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Either]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Either]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Either]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Either]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[in,Either]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[in,Either]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[in,Either]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[in,Either,also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[in,Either,also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[in,Either,also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[Either,also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[Either,also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[Either,also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[away.,Either,also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[away.,Either,also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[away.,Either,also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[away.,Either,also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[away.,Either,also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[away.,Either,also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[Either,also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[Either,also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[Either,also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Either,also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Either,also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Either,also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Either,also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Either,also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Either,also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Either,also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Either,also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Either,also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Peter:,also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Peter:,also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Peter:,also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Peter:,also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Peter:,also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Peter:,also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[also,,So]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[he,also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[he,also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[he,also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[also,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[him,,are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[him,,are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[him,,are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,,are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[her,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[her,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[her,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[her,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[her,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[her,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[her,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[her,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[her,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[the,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[the,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[the,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[what,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[what,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[what,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[what,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[what,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[what,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[what]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[what]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[what]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[the,what]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[the,what]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[the,what]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[the,what,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[the,what,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[the,what,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[baptize,the,what,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[baptize,the,what,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[baptize,the,what,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[baptize,the,what,him,,had,Then,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[baptize,the,what,him,,had,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[baptize,the,what,him,,had,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[baptize,the,what,him,,had,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[baptize,the,what,him,,had,they,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[baptize,the,what,him,,had,they,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[baptize,the,what,him,,had,they,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,the,they,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,the,they,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,the,they,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,the,they,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[baptize,the,what,him,,had,kingdom,the,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[baptize,the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,what,him,,had,kingdom,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,they,Then,his,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,they,Then,his,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,they,Then,his,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,what,him,,had,kingdom,over,they,Then,his,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,what,him,,had,kingdom,over,they,Then,his,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,what,him,,had,kingdom,over,they,Then,his,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,what,him,,had,kingdom,over,they,Then,his,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,what,him,,had,kingdom,over,they,Then,his,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,what,him,,had,kingdom,over,they,Then,his,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[descending,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[descending,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[descending,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[descending,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[descending,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[descending,what,him,,had,kingdom,over,they,Then,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[descending,what,him,,had,kingdom,over,they,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[descending,what,him,,had,kingdom,over,they,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[descending,what,him,,had,kingdom,over,they,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,they,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,they,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,they,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[what,him,,had,kingdom,over,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[what,him,,had,kingdom,over,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[what,him,,had,kingdom,over,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[what,him,,had,kingdom,over,came,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[what,him,,kingdom,over,came,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[what,him,,kingdom,over,came,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[what,him,,kingdom,over,came,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[what,him,,kingdom,over,came,that,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[what,him,,kingdom,over,came,that,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[what,him,,kingdom,over,came,that,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[what,him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,kingdom,over,came,that,they,came,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[him,,kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[had,kingdom,over,came,that,they,and,came]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[had,kingdom,over,came,that,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[had,kingdom,over,came,that,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[had,kingdom,over,came,that,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[had,kingdom,came,that,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[had,kingdom,came,that,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[had,kingdom,came,that,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[had,kingdom,came,that,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[had,kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[had,kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[had,kingdom,came,that,they,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,came,that,they,which,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,came,that,they,which,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,came,that,they,which,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[hypocrites,,kingdom,came,that,they,which,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[hypocrites,,kingdom,came,that,they,which,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[hypocrites,,kingdom,came,that,they,which,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[hypocrites,,kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[hypocrites,,kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[hypocrites,,kingdom,came,that,they,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,came,that,they,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,came,that,they,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,came,that,they,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,they,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,they,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,they,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,they,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[kingdom,came,that,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kingdom,came,that,which,Then,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,which,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Capernaum.,kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Capernaum.,kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Capernaum.,kingdom,came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kingdom,came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[came,that,which,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[came,that,which,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[came,that,which,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[came,that,which,his,country.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[came,that,which,his,country.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[came,that,which,his,country.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[came,that,which,his,country.,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[came,that,which,his,country.,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[came,that,which,his,country.,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[that,which,his,country.,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[that,which,his,country.,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[that,which,his,country.,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[that,which,his,country.,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[that,which,his,country.,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[that,which,his,country.,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[that,which,his,country.,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[that,which,his,country.,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[that,which,his,country.,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[that,which,his,country.,them,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[that,which,his,country.,them,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[that,which,his,country.,them,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[believeth,that,which,his,country.,them,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[believeth,that,which,his,country.,them,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[believeth,that,which,his,country.,them,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[believeth,that,which,his,country.,them,,coals]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[believeth,that,which,his,country.,them,,coals]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[believeth,that,which,his,country.,them,,coals]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[believeth,that,which,his,country.,and,them,,coals]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[believeth,that,which,his,country.,and,them,,coals]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[believeth,that,which,his,country.,and,them,,coals]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,coals,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[soldiers,Barabbas.,believeth,that,which,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[soldiers,Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Barabbas.,believeth,that,which,well,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Barabbas.,believeth,that,which,well,And,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Barabbas.,believeth,that,which,well,And,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Barabbas.,believeth,that,which,well,And,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Barabbas.,believeth,which,well,And,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Barabbas.,believeth,which,well,And,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Barabbas.,believeth,which,well,And,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,country.,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,country.,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Barabbas.,believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Barabbas.,believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Barabbas.,believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Barabbas.,believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,them,,and,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[believeth,which,well,And,day,,he,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[believeth,which,well,And,day,,he,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[believeth,which,well,And,day,,he,his,and,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,which,well,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[believeth,which,well,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[believeth,which,well,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[believeth,which,well,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[believeth,which,you,,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[believeth,which,you,,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[believeth,which,you,,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,am,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[believeth,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[went,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[went,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[went,which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[which,you,,And,day,,he,his,them,,not,did,laughed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,which,you,,And,day,,he,his,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,which,you,,And,day,,as,his,them,,not,did]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,which,you,,And,day,,as,his,them,,not,did]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,which,you,,And,day,,as,his,them,,not,did]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,which,you,,And,day,,as,his,them,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,his,them,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,his,them,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,his,them,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,which,you,,one,day,,as,them,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,which,you,,one,day,,as,them,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,which,you,,one,day,,as,them,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,them,,not,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,them,,not,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,them,,not,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,them,,a,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,them,,a,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,which,you,,one,day,,as,them,,a,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,which,you,,one,day,,scripture,as,them,,a,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,which,you,,one,day,,scripture,as,them,,a,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,which,you,,one,day,,scripture,as,them,,a,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,the,which,you,,one,day,,scripture,as,them,,a,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,the,which,you,,one,day,,scripture,as,them,,a,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,the,which,you,,one,day,,scripture,as,them,,a,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,the,which,you,,one,day,,scripture,as,them,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,the,which,you,,one,day,,scripture,as,them,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,the,which,you,,one,day,,scripture,as,them,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,as,them,,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,as,them,,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,as,them,,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,the,which,you,,one,day,,scripture,as,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,the,which,you,,one,day,,scripture,as,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,the,which,you,,one,day,,scripture,as,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,as,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,as,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,as,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,the,which,you,,one,day,,scripture,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[the,the,which,you,,one,day,,scripture]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[the,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[the,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[the,the,which,you,,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[father,the,which,you,,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[father,the,which,you,,one,her,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[father,the,which,you,,one,her,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[father,the,which,you,,one,her,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[father,the,which,you,,one,unto,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[father,the,which,you,,one,unto,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[father,the,which,you,,one,unto,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[the,which,you,,one,unto,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[the,which,you,,one,unto,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[the,which,you,,one,unto,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[which,you,,one,unto,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[which,you,,one,unto,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[which,you,,one,unto,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[which,you,,one,unto,day,,6:16]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[which,you,,one,unto,day,,6:16]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[which,you,,one,unto,day,,6:16]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[which,one,unto,day,,6:16]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[which,one,unto,day,,6:16]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[which,one,unto,day,,6:16]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[which,one,unto,day,,6:16]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[which,one,unto,day,,6:16]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[which,one,unto,day,,6:16]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[which,one,unto,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[which,one,unto,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[which,one,unto,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[which,one,unto,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[which,one,unto,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[which,one,unto,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[which,one,unto,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[which,one,unto,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[which,one,unto,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[which,one,unto,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[which,one,unto,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[which,one,unto,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[ready,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[ready,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[ready,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[ready,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ready,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ready,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[of,ready,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[of,ready,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[of,ready,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[of,ready,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,ready,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,ready,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[of,ready,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,ready,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,ready,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[of,which,one,day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[of,which,one,day,,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[of,which,one,day,,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[of,which,one,day,,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[of,which,all,day,,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[thou,of,which,all,day,,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[thou,of,which,all,day,,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[thou,of,which,all,day,,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[thou,of,which,all,day,,was,Sadducees.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[thou,of,which,all,day,,was,Sadducees.,Abraham's,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,Abraham's,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,Abraham's,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,Abraham's,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Lord,thou,of,which,all,day,,was,Sadducees.,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Lord,thou,of,which,all,Yet,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Lord,thou,of,which,all,Yet,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Lord,thou,of,which,all,Yet,day,,was,Sadducees.,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[thou,of,which,all,Yet,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[thou,of,which,all,Yet,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[thou,of,which,all,Yet,day,,was,Sadducees.,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[thou,of,which,all,Yet,stood,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[thou,of,which,all,Yet,stood,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[thou,of,which,all,Yet,stood,day,,was,Sadducees.,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,which,all,Yet,stood,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,which,all,Yet,stood,day,,was,Sadducees.,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,which,all,Yet,stood,day,,was,Sadducees.,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,which,all,Yet,stood,day,,was,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,day,,was,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,day,,was,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,day,,was,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,day,,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,day,,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,day,,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[of,which,all,Yet,stood,all,day,,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,which,all,Yet,stood,all,day,,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,which,all,Yet,stood,all,day,,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,daughter,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,daughter,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,which,all,Yet,stood,all,daughter,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[of,which,all,Yet,stood,to,all,daughter,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[of,which,all,Yet,stood,to,all,daughter,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[of,which,all,Yet,stood,to,all,daughter,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[of,which,all,Yet,brought,to,all,daughter,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[of,which,all,Yet,brought,to,all,daughter,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[of,which,all,Yet,brought,to,all,daughter,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[of,which,all,Yet,brought,troubled,to,all,daughter,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[of,which,all,Yet,brought,troubled,to,all,daughter,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[of,which,all,Yet,brought,troubled,to,all,daughter,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[of,which,all,Yet,brought,troubled,to,all,daughter,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[of,which,all,Yet,brought,troubled,to,all,daughter,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[of,which,all,Yet,brought,troubled,to,all,daughter,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[deadly,of,which,all,Yet,brought,troubled,all,daughter,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[deadly,of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[of,which,all,Yet,The,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and,there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and,there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and,there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and,there,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and,there,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[of,which,all,Yet,The,ye,brought,troubled,all,And,they,and,there,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[of,which,all,Yet,The,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[of,which,all,Yet,The,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[of,which,all,Yet,The,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[of,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[of,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[of,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[of,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[of,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[of,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[in,which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[which,all,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[which,all,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[which,all,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[which,all,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[which,all,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[which,all,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[which,all,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[was,which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[was,which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[was,which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[if,was,which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[if,was,which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[if,was,which,my,Yet,the,ye,will,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[if,was,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not,wisdom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[himself,,spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[himself,,spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[himself,,spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[said,himself,,spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[said,himself,,spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[said,himself,,spoken,if,and,which,my,Yet,the,ye,the,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[said,himself,,spoken,if,and,which,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[said,himself,,spoken,if,and,which,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[said,himself,,spoken,if,and,which,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[himself,,spoken,if,and,which,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[himself,,spoken,if,and,which,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[himself,,spoken,if,and,which,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[himself,,spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[himself,,spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[himself,,spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,there,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[spoken,if,and,which,him:,my,Yet,the,ye,brought,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye,away,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,the,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[spoken,if,and,which,him:,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[say,,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[aside,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[aside,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[aside,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[aside,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[aside,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[aside,spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,if,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[spoken,priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[spoken,priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[spoken,priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[spoken,priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[spoken,priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[spoken,priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[priests,,and,which,him:,and,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[priests,,and,which,him:,and,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[priests,,and,which,him:,and,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[priests,,and,which,him:,and,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[the,priests,,and,which,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[brake,the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[brake,the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[brake,the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[brake,the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[brake,the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[brake,the,priests,,and,beasts;,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,And,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[from,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[up,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[up,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[up,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[up,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[up,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[up,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,him:,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[and,And,brake,the,priests,,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[and,And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[and,And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[and,And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[and,And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[and,And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[and,And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto,He]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,brake,the,I,and,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[And,brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[brake,the,I,and,them,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[brake,the,I,and,them,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[brake,the,I,and,them,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[brake,the,I,and,them,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes,pass,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes,pass,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes,pass,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes,pass,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes,pass,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes,pass,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto,scribes]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[not,with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[not,with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[not,with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[not,with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[not,with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[not,with,pass,,was,brake,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[not,with,pass,,was,brake,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[not,with,pass,,was,brake,And,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[not,with,pass,,was,brake,And,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[not,with,pass,,was,brake,And,through,the,I,and,them,warmed,all,beasts;,I,and,sake.,sit,my,Yet,fire.,ye,done,troubled,the,they,and,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 1
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 1
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 1
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[give,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[give,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[give,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[give,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[give,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[give,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[give,unto,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[give,unto,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[give,unto,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[unto,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[unto,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[unto,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[unto,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[unto,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[their]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[their]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[their]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[11:13]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[11:13]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[11:13]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[11:13,Lord]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[11:13,Lord]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[11:13,Lord]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[11:13,Lord]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[11:13,Lord]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[11:13,Lord]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[11:13,Lord,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[11:13,Lord,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[11:13,Lord,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[11:13,Lord]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[11:13,Lord]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[11:13,Lord]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[11:13]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[11:13]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[11:13]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[11:13]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[11:13]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[11:13]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[arrayed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[arrayed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[arrayed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[my]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[my]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[my]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[my]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[my]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[my]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[my,disciples]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[my,disciples]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[my,disciples]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[my,disciples]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[my,disciples]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[my,disciples]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[my]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[my]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[my]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[into,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[into,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[into,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[And,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[And,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[And,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[likewise,And,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[likewise,And,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[likewise,And,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[likewise,And,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,likewise,And,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,likewise,And,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,likewise,And,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,am,likewise,And,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,am,likewise,And,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,am,likewise,And,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,likewise,And,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,likewise,And,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,likewise,And,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[am,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[so,am,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[so,am,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[so,am,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[so,am,likewise,it,false,Lord]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[so,am,likewise,it,false,Lord]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[so,am,likewise,it,false,Lord]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[so,am,likewise,it,false,man,Lord]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[so,am,likewise,it,false,man,Lord]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[so,am,likewise,it,false,man,Lord]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[so,am,likewise,it,false,man,Lord]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[so,am,likewise,it,false,man,Lord]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[so,am,likewise,it,false,man,Lord]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[am,likewise,it,false,man,Lord]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[am,likewise,it,false,man,Lord]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[am,likewise,it,false,man,Lord]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[am,likewise,it,false,man,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[am,likewise,it,false,man,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[am,likewise,it,false,man,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,likewise,it,false,man]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[am,likewise,it,false,man]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,likewise,it,false,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,likewise,it,false,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,likewise,it,false,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,likewise,it,false,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,likewise,it,false,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,likewise,it,false,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[the,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[of,know,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[of,know,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[of,know,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[of,know,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,know,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,know,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[know,of,likewise,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[know,of,day,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[know,of,day,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[know,of,day,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[know,of,day,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[know,of,day,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[know,of,day,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[know,of,day,it,false,interpreted,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[know,of,day,it,false,interpreted,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[know,of,day,it,false,interpreted,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[know,of,day,it,false,interpreted,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[know,of,day,it,false,interpreted,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[know,of,day,it,false,interpreted,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[of,day,it,false,interpreted,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[of,day,it,false,interpreted,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[of,day,it,false,interpreted,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[day,it,false,interpreted,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[day,it,false,interpreted,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[day,it,false,interpreted,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[is,day,it,false,interpreted,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[is,day,it,false,interpreted,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[is,day,it,false,interpreted,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[is,day,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[is,day,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[is,day,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[is,day,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[is,day,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[is,day,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Enoch,,is,day,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Enoch,,is,day,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Enoch,,is,day,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Enoch,,is,day,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Enoch,,is,day,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Enoch,,is,day,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Enoch,,is,day,it,false,eating]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nathanael,Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nathanael,Enoch,,is,day,it,false,eating]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nathanael,Enoch,,is,day,it,false,eating]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Nathanael,Enoch,,is,day,it,false]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Nathanael,Enoch,,is,day,it,false]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Nathanael,Enoch,,is,day,it,false]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[was,Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[was,Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[was,Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Nathanael,Enoch,,is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Nathanael,Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Nathanael,Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Nathanael,Enoch,,is,day,it,devils,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Nathanael,Enoch,,is,day,it,devils,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Enoch,,is,day,it,devils,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[Enoch,,is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[Enoch,,is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[Enoch,,is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[is,day,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[is,day,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[is,day,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[is,day,it,by]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[is,day,it,by,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[is,day,it,by,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[is,day,it,by,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[day,it,by,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[day,it,by,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[day,it,by,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[day,it,by,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[day,it,by,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[day,it,by,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[day,it,by,a,Andrew:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[day,by,a,Andrew:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[day,by,a,Andrew:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[day,by,a,Andrew:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[day,by,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[day,by,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[day,by,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[day,by]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[day,by]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[day,by]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[day,by,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[day,by,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[day,by]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[day,by]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[day,by]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[he,day,by]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[he,day,by]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[he,day,by]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,he,day,by]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,he,day,by]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,he,day,by]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,he,day,by,house]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,he,day,by,house]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,he,day,by,house]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[and,he,day,by,house,shewbread,,thyself?]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[and,he,day,by,house,shewbread,,thyself?]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[and,he,day,by,house,shewbread,,thyself?]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[and,he,day,by,house,shewbread,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[and,he,day,by,house,shewbread,,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[and,he,day,by,house,shewbread,,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[and,he,day,by,house,shewbread,,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,he,day,by,house,shewbread,,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,he,day,by,house,shewbread,,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,he,day,by,house,shewbread,,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[he,day,by,house,shewbread,,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[he,day,by,house,shewbread,,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[he,day,by,house,shewbread,,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[he,day,by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[he,day,by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[he,day,by,house,shewbread,,asked,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[he,by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[he,by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[he,by,house,shewbread,,asked,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[he,by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[he,by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[he,by,house,shewbread,,asked,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[by,house,shewbread,,asked,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[by,house,shewbread,,asked,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[by,house,shewbread,,asked,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[by,house,shewbread,,asked]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[by,house,shewbread,,asked]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[by,house,shewbread,,asked]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[house,shewbread,,asked]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[house,shewbread,,asked]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[house,shewbread,,asked]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[house,shewbread,,asked]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[house,shewbread,,asked]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[house,shewbread,,asked]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[house,shewbread,,asked,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[house,shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[shewbread,,asked,destroy,loud,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[shewbread,,asked,destroy,loud,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[shewbread,,asked,destroy,loud,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[because,shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[because,shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[because,shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[shewbread,,asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[asked,destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[asked,destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[asked,destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[destroy,loud,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[destroy,loud,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[destroy,loud,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[destroy,loud,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy,loud,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy,loud,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy,loud]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[destroy,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[destroy,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[destroy,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[tempting,see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[tempting,see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[tempting,see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[they,tempting,see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[they,tempting,see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[they,tempting,see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[tempting,see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[tempting,see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[tempting,see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[tempting,see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[tempting,see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[tempting,see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[unto,tempting,see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[unto,tempting,see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[unto,tempting,see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[unto,tempting,see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[unto,tempting,see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[unto,tempting,see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[unto,tempting,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[unto,tempting,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[unto,tempting,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[tempting,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[tempting,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[tempting,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[tempting,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[tempting,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[tempting,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[branch,and,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[branch,and,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[branch,and,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[see,destroy,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[see,destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[see,destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[see,destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[destroy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[said,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[said,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[said,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[said,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[said,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[said,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[said,,is,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[said,,is,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[said,,is,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[said,,is,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[said,,is,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[said,,is,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[said,,is,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[said,,is,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[said,,is,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[said,,is,,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[said,,is,,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[said,,is,,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[said,,is,,to,there:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[said,,is,,to,there:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[said,,is,,to,there:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[said,,is,,to,there:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[said,,is,,to,there:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[said,,is,,to,there:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[is,,to,there:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[is,,to,there:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[is,,to,there:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[took,is,,to,there:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[took,is,,to,there:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[took,is,,to,there:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[took,is,,to,there:,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[took,is,,to,there:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[took,is,,to,there:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[took,is,,to,there:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[took,is,,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[took,is,,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[took,is,,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[first.,took,is,,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[first.,took,is,,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[first.,took,is,,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[first.,took,is,,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[first.,took,is,,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[first.,took,is,,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[took,is,,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[took,is,,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[took,is,,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[again,took,is,,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[again,took,is,,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[again,took,is,,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[again,is,,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[again,is,,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[again,is,,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[again,is,,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[again,is,,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[again,is,,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[again,from,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[again,from,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[again,from,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[together,,from,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[together,,from,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[together,,from,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[from,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[from,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[from,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Then,from,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Then,from,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Then,from,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[the,Then,from,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[the,Then,from,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[the,Then,from,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,Then,from,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,Then,from,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,Then,from,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,Then,from,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,Then,from,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,Then,from,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[the,Then,from]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[the,Then,from]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[the,Then,from]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,Then,from]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,Then,from]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,Then,from]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[the,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[the,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[the,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[out,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[out,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[out,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[out,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[out,Then,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[out,Then,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[out,Then,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[out,Then,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[out,Then,I,had]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[out,Then,I,had]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[out,Then,I,had]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[out,Then,I,had]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[out,Then,I,had]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[out,Then,I,had]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[out,Then,I,had,Five,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[out,Then,I,had,Five,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[out,Then,I,had,Five,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[out,Then,I,had,Five,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[out,Then,I,had,Five,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[out,Then,I,had,Five,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[Then,I,had,Five,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[Then,I,had,Five,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[Then,I,had,Five,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Then,I,had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[I,had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[I,had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[I,had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[I,had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[I,had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[I,had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[had,Five,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[had,Five,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[had,Five,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[had,Five,,and,indeed.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[had,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[had,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[had,Five,,and,indeed.,whose]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[had,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[had,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[had,Five,,and,indeed.,whose]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[Five,,and,indeed.,whose]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[Five,,and,indeed.,whose]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[make,Five,,and,indeed.,whose]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[make,Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[make,Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[make,Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[answering,Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[answering,Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[answering,Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[answering,Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[answering,Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[answering,Five,,and,indeed.,whose,hardness,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[answering,Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[answering,Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[answering,Five,,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[answering,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[the,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[the,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[the,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,whose,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[as,labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[as,labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[as,labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[labourers,and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,indeed.,26:37,hardness]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,indeed.,26:37,hardness]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[and,indeed.,26:37]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[and,indeed.,26:37]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[and,indeed.,26:37]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,indeed.,26:37,10:6]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,indeed.,26:37,10:6]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,indeed.,26:37,10:6]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,indeed.,26:37,10:6,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[without,indeed.,26:37,10:6,the,crying]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[without,indeed.,26:37,10:6,the,crying]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[without,indeed.,26:37,10:6,the,crying]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[without,indeed.,26:37,10:6,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[without,indeed.,26:37,10:6,the,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[without,indeed.,26:37,10:6,the,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[without,indeed.,26:37,10:6,the,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[without,indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[without,indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[without,indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[indeed.,26:37,10:6,the,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[26:37,10:6,the,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[26:37,10:6,the,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[26:37,10:6,the,he,they,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[10:6,the,he,they,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[10:6,the,he,they,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[10:6,the,he,they,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[10:6,the,he,they,days,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[10:6,the,he,they,days,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[10:6,the,he,they,days,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[10:6,the,he,they,days,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[10:6,the,he,they,days,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[10:6,the,he,they,days,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[10:6,he,they,days,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[10:6,he,they,days,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[10:6,he,they,days,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[10:6,he,they,days,for,mother,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[10:6,he,they,days,for,mother,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[10:6,he,they,days,for,mother,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[10:6,he,they,days,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[10:6,he,they,days,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[10:6,he,they,days,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[10:6,he,they,days,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[10:6,he,they,days,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[10:6,he,they,days,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[do:,10:6,he,they,days,for]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[do:,10:6,he,they,days,for]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[do:,10:6,he,they,days,for]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[do:,10:6,he,they,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[do:,10:6,he,they,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[do:,10:6,he,they,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[do:,10:6,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[do:,10:6,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[do:,10:6,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[do:,10:6,he,God.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[do:,10:6,he,God.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[do:,10:6,he,God.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[10:6,he,God.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[10:6,he,God.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[10:6,he,God.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[he,God.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[he,God.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[he,God.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[he,God.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[he,God.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[he,God.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[he,God.,are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[he,God.,are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[he,God.,are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,God.,are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[one,he,God.,are]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[one,he,God.,are]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[one,he,God.,are]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[one,he,God.,how]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[one,he,God.,how]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[one,he,God.,how]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[one,he,God.,how]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[one,he,God.,how]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[one,he,God.,how]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[one,he,God.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[one,he,God.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[one,he,God.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[nor,one,he,God.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[nor,one,he,God.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[nor,one,he,God.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[nor,one,he,God.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,one,he,God.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,one,he,God.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[nor,one,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[nor,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[nor,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[nor,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[nor,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[nor,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[nor,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[nor,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[the,nor,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[the,nor,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[the,nor,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[the,nor,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[the,nor,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[the,nor,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[12:10,the,nor,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[12:10,the,nor,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[12:10,the,nor,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[12:10,the,nor]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[12:10,the,nor]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[12:10,the,nor]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[12:10,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[12:10,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[12:10,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[12:10]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[12:10]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[12:10]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[12:10]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[12:10]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[12:10]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[12:10]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[12:10]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[12:10]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[12:10,Thine]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[12:10,Thine]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[12:10,Thine]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Thine]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[who,make]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[who,make]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[who,make]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[who,make]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[make,into]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[make,into]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[make,into]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[make]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[heaven.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[heaven.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[heaven.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[trodden]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[trodden,seek]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[seek]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[seek]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[seek]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[unto,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[unto,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[unto,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[that,this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[that,this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[that,this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[that,this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[him,that,this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[him,that,this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[him,that,this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[and,And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[and,And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[and,And,him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[And,him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[heard,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[heard,him,him,that,this,created,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[heard,him,him,that,this,created,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[heard,him,him,that,this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[heard,him,him,that,this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[heard,him,him,that,this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[him,him,that,this,created]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[him,him,that,this,created]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[him,him,that,this,created]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[before,him,him,that,this]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[before,him,him,that,this]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[before,him,him,that,this]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[him,him,that,this]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[him,him,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[him,him,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[him,him,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[man,him,him,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[him,him,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[him,him,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[him,him,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[him,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[him,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[him,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[him,that,verily,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[him,that,verily,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[him,that,verily,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[him,8:46,verily,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[him,8:46,verily,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[him,8:46,verily,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[8:46,verily,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[8:46,verily,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[8:46,verily,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[8:46]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[8:46]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[8:46]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[8:46,do]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[8:46,do]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[8:46,do]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[8:46,do,am]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[8:46,do,am]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[8:46,do,am]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[worship,8:46,do,am]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[worship,8:46,do,am]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[worship,8:46,do,am]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[worship,8:46,do,am,God,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[worship,8:46,do,am,God,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[worship,8:46,do,am,God,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[worship,8:46,do,am,God,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[worship,8:46,do,am,God,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[worship,8:46,do,am,God,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[worship,8:46,do,am,God,,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[worship,8:46,do,am,God,,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[worship,8:46,do,am,God,,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[worship,8:46,do,am,God,,left,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[8:46,do,am,God,,left,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[8:46,do,am,God,,left,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[8:46,do,am,God,,left,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[8:46,do,am,God,,left,be,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[8:46,do,am,God,,left,be,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[8:46,do,am,God,,left,be,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[8:46,do,am,God,,left,be,he,13:53,David,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[8:46,do,am,God,,left,be,he,13:53,David,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[8:46,do,am,God,,left,be,he,13:53,David,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[8:46,do,am,God,,left,be,he,13:53,David,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[8:46,do,am,God,,left,be,he,13:53,David,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[8:46,do,am,God,,left,be,he,13:53,David,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[8:46,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[your,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[your,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[your,do,am,God,,left,be,he,13:53]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[do,am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[do,am,God,,left,be,he,13:53]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[am,God,,left,be,he,13:53]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[am,God,,left,be,he,13:53]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,God,,left,be,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,God,,left,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,God,,left,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,God,,left,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,Father,left,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,Father,left,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,Father,left,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[am,Father,left]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[am,Father,left]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[am,Father,left]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,Father,left,17:15]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,Father,left,17:15]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,Father,left,17:15]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[am,Father,left,17:15,the,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[am,Father,left,17:15,the,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[am,Father,left,17:15,the,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[am,Father,left,17:15,the,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[am,Father,left,17:15,the,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[am,Father,left,17:15,the,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[am,Father,left,17:15,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[am,Father,left,17:15]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[am,Father,left,17:15]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[am,Father,left,17:15]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[am,Father,left,17:15,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,hath]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[him,,am,Father,left,17:15]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,pay,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,pay,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,pay,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,pay,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,pay,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,am,Father,left,17:15,pay,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[him,,Father,left,17:15,pay,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[him,,Father,left,17:15,pay,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[him,,Father,left,17:15,pay,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,,Father,left,17:15,pay,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,Father,left,17:15,pay,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,Father,left,17:15,pay,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[him,,Father,left,17:15,pay,,not,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[him,,Father,left,17:15,pay,,not,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[him,,Father,left,17:15,pay,,not,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[him,,Father,left,17:15,pay,,not,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[him,,Father,left,17:15,pay,,not,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[him,,Father,left,17:15,pay,,not,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,Father,left,17:15,pay,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,pay,,not,well,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,pay,,not,well,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,pay,,not,well,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[him,,Father,barns,,17:15,pay,,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,pay,,it,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,pay,,it,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,pay,,it,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Father,barns,,17:15,overshadow,it,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Father,against,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Father,against,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Father,against,17:15,overshadow,it,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Father,against,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Father,against,17:15,overshadow,it,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Father,against,17:15,overshadow,it,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Father,against,17:15,overshadow,it,The,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Father,against,17:15,overshadow,it,The,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Father,against,17:15,overshadow,it,The,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Father,against,17:15,overshadow,it,is,The,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Father,against,17:15,overshadow,it,is,The,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Father,against,17:15,overshadow,it,is,The,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Father,against,17:15,overshadow,it,he,is,The,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Father,against,17:15,overshadow,it,he,is,The,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Father,against,17:15,overshadow,it,he,is,The,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Father,against,17:15,overshadow,it,he,is,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Father,against,17:15,overshadow,it,he,is,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Father,against,17:15,overshadow,it,he,is,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[against,17:15,overshadow,it,he,is,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[against,17:15,overshadow,it,he,is,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[against,17:15,overshadow,it,he,is,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[17:15,overshadow,it,he,is,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[17:15,overshadow,it,he,is,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[17:15,overshadow,it,he,is,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[17:15,overshadow,it,he,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[17:15,overshadow,it,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[behold,,17:15,overshadow,it,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[behold,,17:15,overshadow,it,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[behold,,17:15,overshadow,it,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[behold,,17:15,overshadow,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[behold,,17:15,overshadow,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[behold,,17:15,overshadow,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[behold,,17:15,overshadow,it,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[behold,,17:15,overshadow,it,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[behold,,17:15,overshadow,it,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[behold,,17:15,overshadow,it,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[behold,,17:15,overshadow,it,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[behold,,17:15,overshadow,it,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[behold,,17:15,overshadow,it,it,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[behold,,17:15,overshadow,it,it,in,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[behold,,17:15,overshadow,it,it,in,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[behold,,17:15,overshadow,it,it,in,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[behold,,17:15,overshadow,it,it,in,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[behold,,17:15,overshadow,it,it,in,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[behold,,17:15,overshadow,it,it,in,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[behold,,17:15,overshadow,it,it,in,the,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[behold,,17:15,overshadow,it,it,in,the,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[behold,,17:15,overshadow,it,it,in,the,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[behold,,17:15,overshadow,kept,it,in,the,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[behold,,17:15,overshadow,kept,it,in,the,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[behold,,17:15,overshadow,kept,it,in,the,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[behold,,17:15,kept,it,in,the,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[behold,,17:15,kept,it,in,the,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[behold,,17:15,kept,it,in,the,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[17:15,kept,it,in,the,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[17:15,kept,it,in,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[17:15,kept,it,in,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[17:15,kept,it,in,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[17:15,kept,it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[17:15,kept,it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[17:15,kept,it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[17:15,kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[17:15,kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[17:15,kept,it,in,the,that,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[slow,kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[slow,kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[slow,kept,it,in,the,that,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[kept,it,in,the,that,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kept,it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kept,it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kept,it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[kept,it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[kept,it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[kept,it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[kept,it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[kept,it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[kept,it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[it,in,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[it,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[it,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[it,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[it,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[it,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[it,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[herd,it,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[herd,it,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[herd,it,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[herd,it,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[herd,it,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[herd,it,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[herd,it,the,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[herd,it,the,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[herd,it,the,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[herd,it,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[herd,it,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[herd,it,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[he,herd,it,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[he,herd,it,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[he,herd,it,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[he,herd,it,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,herd,it,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,herd,it,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[he,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[he,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[he,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[he,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[a,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[a,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[a,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[a,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[a,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[a,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[a,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[a,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[a,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[but,a,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[but,a,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[but,a,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[but,a,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[but,a,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[but,a,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[but,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[but,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[but,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[but,herd,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[but,herd,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[but,herd,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[but,herd,it,him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[but,herd,it,him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[but,herd,it,him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[but,herd,it,him,,8:56]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[but,herd,it,him,,8:56]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[but,herd,it,him,,8:56]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[but,herd,it,him,,8:56,1:78]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[but,herd,it,him,,8:56,1:78]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[but,herd,it,him,,8:56,1:78]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[but,herd,it,him,,8:56,1:78]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[but,herd,it,him,,8:56,1:78]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[but,herd,it,him,,8:56,1:78]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[but,herd,it,of,8:56,1:78]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[but,herd,it,of,8:56,1:78]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[they,that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[they,that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[they,that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[they,that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,that,but,herd,it,of,8:56,1:78]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[they,that,but,herd,it,of,8:56]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[they,that,but,herd,it,of,8:56]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[they,that,but,herd,it,of,8:56]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[they,that,but,herd,it,of,8:56]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,that,but,herd,it,of,8:56]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,that,but,herd,it,of,8:56]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[they,that,but,herd,it,they,of,8:56]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[they,that,but,herd,it,they,of,8:56]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[they,that,but,herd,it,they,of,8:56]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[they,that,but,herd,it,intent,they,of,8:56]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[they,that,but,herd,it,intent,they,of,8:56]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[they,that,but,herd,it,intent,they,of,8:56]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[they,that,but,herd,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[they,that,but,herd,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[they,that,but,herd,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[they,that,but,it,intent,they,of,8:56,of,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[they,that,but,it,intent,they,of,8:56,of,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[they,that,but,it,intent,they,of,8:56,of,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,8:56,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[place,they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[place,they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[place,they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[place,they,that,but,it,intent,they,of,fire.,of,9:21]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[place,they,that,but,it,intent,they,of,fire.,of,9:21]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[place,they,that,but,it,intent,they,of,fire.,of,9:21]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[place,they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[place,they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[place,they,that,but,it,intent,they,of,fire.,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[place,they,that,but,it,intent,they,of,fire.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[place,they,that,but,it,intent,they,of,fire.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[place,they,that,but,it,intent,they,of,fire.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,place,they,that,but,it,thy,intent,they,of,fire.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
