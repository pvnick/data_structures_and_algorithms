Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[doeth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[they,sowed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[they,sowed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[they,sowed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[they,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[they,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[they,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[hands]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[hands]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hands]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hands]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[this,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[this,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[this,,appear]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[this,,appear]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[this,,appear]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[this,,appear]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[another,appear]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[another,appear]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[another,appear]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[appear]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[appear]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[appear]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[appear]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[appear]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[appear]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[appear,there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[appear,there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[appear,there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[there]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[there]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[there]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[an]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[an]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[an]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 1
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 1
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 1
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[an]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[an]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[an]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[your,an]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[your,an]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[your,an]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[your,an]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[your,an]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[your,an]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[your]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[your]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[your]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 1
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 1
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 1
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[tread]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[tread]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[tread]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[tread,lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[tread,lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[tread,lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[tread,lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[tread,lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[tread,lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[tread,lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[lifted]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[namely]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[namely,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[namely,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[namely,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[23:11]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[23:11]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[23:11]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[4:12]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[4:12]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[4:12]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[4:12]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[4:12]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[4:12]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 2
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[father]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[father]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[father]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[father]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[father]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[father]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[blessed,,father]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[blessed,,father]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[blessed,,father]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[blessed,,12:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[blessed,,12:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[blessed,,12:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[12:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[12:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[12:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[out]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[out]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[out]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[out]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[out]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[out]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[here:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[here:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[here:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Christ]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Christ]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Christ]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Christ]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Christ]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Christ]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Christ]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Christ]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Christ]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Christ]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Christ]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Christ]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[he,know]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[he,know]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[he,know]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[know]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[know]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[know]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[know]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[know]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[know]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[know,5:11]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[know,5:11]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[know,5:11]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[know,5:11]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[know,5:11]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[know,5:11]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[know,5:11]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[know,5:11]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[know,5:11]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[5:11]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[5:11]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[5:11]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[to,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[to,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[to,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[with,to,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[to,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[I,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[I,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[I,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[I,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[I,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[I,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[I,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[I,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[I,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[I,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[I,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[I,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[among]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[among]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[among]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[prison.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[prison.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[prison.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[prison.,3:4]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[prison.,3:4]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[prison.,3:4]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[prison.,3:4,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[prison.,3:4,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[prison.,3:4,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[prison.,3:4,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[prison.,3:4,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[prison.,3:4,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[they,prison.,3:4,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[they,prison.,3:4,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[they,prison.,3:4,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[prison.,3:4,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[prison.,3:4,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[prison.,3:4,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[prison.,3:4,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[all.,prison.,3:4,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[all.,prison.,3:4,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[all.,prison.,3:4,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[all.,prison.,3:4,the,But,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[all.,prison.,3:4,the,But,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[all.,prison.,3:4,the,But,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[all.,prison.,3:4,the,But,them,,asketh]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[all.,prison.,3:4,the,But,them,,asketh]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[all.,prison.,3:4,the,But,them,,asketh]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[to,Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[to,Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[to,Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[to,Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[to,Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[to,Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,mayest,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Isaac,,him.,have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[him.,have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh,witnesses]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[have,all.,prison.,3:4,shall,the,But,went,them,,asketh]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[have,all.,prison.,3:4,shall,disciple,the,But,went,them,,asketh]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[have,all.,prison.,3:4,shall,disciple,the,But,went,them,,asketh]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[have,all.,prison.,3:4,shall,disciple,the,But,went,them,,asketh]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[all.,prison.,3:4,shall,disciple,the,But,went,them,,asketh]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[all.,prison.,3:4,shall,disciple,the,But,went,them,,asketh]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[all.,prison.,3:4,shall,disciple,the,But,went,them,,asketh]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[all.,prison.,3:4,shall,disciple,the,But,went,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[all.,prison.,3:4,shall,disciple,the,But,went,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[all.,prison.,3:4,shall,disciple,the,But,went,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[all.,prison.,3:4,shall,disciple,the,But,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[all.,prison.,3:4,shall,disciple,the,But,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[all.,prison.,3:4,shall,disciple,the,But,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[all.,prison.,3:4,shall,disciple,the,But,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[all.,prison.,3:4,shall,disciple,the,But,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[all.,prison.,3:4,shall,disciple,the,But,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[or,all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[or,all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[or,all.,prison.,3:4,shall,disciple,the,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[or,all.,prison.,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[or,all.,prison.,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[or,all.,prison.,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[or,all.,prison.,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[or,all.,prison.,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[or,all.,prison.,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[or,all.,was,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[or,all.,was,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[or,all.,was,3:4,shall,disciple,the,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[or,all.,was,3:4,shall,the,disciple,the,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[or,all.,was,3:4,shall,the,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[or,all.,was,3:4,shall,but,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[or,all.,was,3:4,shall,but,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[or,all.,was,3:4,shall,but,the,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,the,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,But,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[From,heaven.,or,all.,was,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[not,From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[not,From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[not,From,heaven.,or,all.,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,From,heaven.,or,makest,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[not,From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[not,From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[not,From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,preparation,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[not,From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,shall,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[is,From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[is,From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[is,From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[is,From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[is,From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[is,From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,pass,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[From,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[going,,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[going,,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[going,,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[going,,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,many,was,hill,3:4,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[it,going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[it,going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[it,going,,heaven.,or,makest,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,Pharisee's,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[it,going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[going,,heaven.,or,makest,and,many,was,hill,seek,of,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[going,,heaven.,or,makest,and,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[going,,heaven.,or,makest,and,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[going,,heaven.,or,makest,and,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,disciple,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[going,,heaven.,or,makest,and,in,know,many,was,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[going,,heaven.,or,makest,and,in,know,many,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[going,,heaven.,or,makest,and,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[26:5,going,,heaven.,or,makest,and,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[26:5,going,,heaven.,or,makest,and,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[26:5,going,,heaven.,or,makest,and,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[26:5,going,,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[26:5,going,,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[26:5,going,,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[26:5,his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[26:5,his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[26:5,his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[26:5,his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[26:5,his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[26:5,his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[mother,his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[mother,his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[mother,his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,purple]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[mother,his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[mother,his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[mother,his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[his,heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[heaven.,or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[or,makest,heavy,a,in,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[or,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[or,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[or,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[not,makest,heavy,a,in,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[not,makest,heavy,a,in,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[not,makest,heavy,a,in,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[not,makest,heavy,a,in,do,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[not,makest,heavy,a,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[not,makest,heavy,a,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[not,makest,heavy,a,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[not,makest,heavy,in,them,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[not,makest,heavy,in,them,,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[not,makest,heavy,in,them,,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[not,makest,heavy,in,them,,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not,which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not,which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not,which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,know,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,the,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,way]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,way]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,way]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,way]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,way]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,way]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[men,his,not,makest,heavy,in,them,,And,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[men,his,not,makest,heavy,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[men,his,not,makest,heavy,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[men,his,not,makest,heavy,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[men,his,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[men,his,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[men,his,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[men,his,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[men,his,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[men,his,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,seek,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[brethren!,men,to,not,makest,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,wife,,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,as,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brethren!,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[hath,Which,men,to,not,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,in,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,them,,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,hath,Which,men,to,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,the,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[they,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[that,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[that,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[that,and,hath,Which,men,to,by,not,healed,Arimathaea,,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[that,and,hath,Which,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[that,and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[and,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[power,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[power,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[power,hath,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,of,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[power,be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[be,man,men,to,by,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[be,man,men,to,by,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[be,man,men,to,by,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[be,man,men,to,by,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[be,man,men,to,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[be,man,men,to,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[be,man,men,to,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[teachest,be,man,men,to,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[teachest,be,man,men,to,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[teachest,be,man,men,to,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,by,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[teachest,be,man,men,to,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[teachest,be,man,men,evil.,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[teachest,be,man,men,evil.,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[teachest,be,man,men,evil.,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,who,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,him.,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,received,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[be,Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[be,Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[be,Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[Jesus,teachest,be,man,men,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[Jesus,teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[Jesus,teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[Jesus,teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[Jesus,teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[Jesus,teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[Jesus,teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,at,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[teachest,be,man,men,if,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[teachest,be,man,men,if,shall,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[teachest,be,man,men,if,shall,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[teachest,be,man,men,if,shall,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,man,men,if,shall,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,man,men,if,shall,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,man,men,if,shall,evil.,the,not,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,man,men,if,shall,evil.,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,man,men,if,shall,evil.,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,man,men,if,shall,evil.,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,evil.,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,evil.,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,evil.,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[teachest,be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,the,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that,them,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[be,followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,heavy,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,to,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,men,if,shall,thus,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,he,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,sin.,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,sin.,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,sin.,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,not,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[unto,followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[unto,followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[unto,followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[unto,followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[unto,followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[unto,followed,men,if,shall,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[unto,followed,men,if,shall,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[unto,followed,men,if,shall,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[unto,followed,men,if,shall,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,him,,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[good,unto,followed,men,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[good,unto,followed,him,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[good,unto,followed,him,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[good,unto,followed,him,if,shall,He,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[good,unto,followed,him,if,shall,the,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[good,unto,followed,him,if,shall,the,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[good,unto,followed,him,if,shall,the,more,custom:,with,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[good,unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[good,unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[good,unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[unto,followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,the,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[followed,him,if,shall,the,more,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[followed,him,if,shall,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[followed,him,if,shall,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[followed,him,if,shall,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[him,if,shall,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[him,if,shall,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[him,if,shall,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,my,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,Take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[Give,,him,if,priest,the,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Give,,him,if,priest,the,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[Give,,him,if,priest,the,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,that,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=35, contents=[Give,,him,if,priest,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[Give,,him,if,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[Give,,him,if,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[Give,,him,if,the,Jesus,10:15,it.,down,custom:,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=34, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=34, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=34, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=33, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=33, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=33, contents=[Give,,him,if,the,Jesus,10:15,it.,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,no,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Give,,him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=32, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=32, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=32, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[him,if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[if,the,Jesus,10:15,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[if,the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[if,the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[if,the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,days]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[if,the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[if,the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[if,the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[the,Jesus,10:2,down,in,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,hill,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=31, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,shoes,,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,be,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,Saying,,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,were,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,they,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,down,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,in,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,as,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[then,15:4,feet,,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[then,15:4,the,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[then,15:4,the,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[then,15:4,the,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[then,15:4,they,the,Jesus,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=30, contents=[brought,then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=30, contents=[brought,then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=30, contents=[brought,then,15:4,they,the,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto,20:25]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=29, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=29, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=29, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,10:2,eyes,,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=28, contents=[Out,brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=28, contents=[Out,brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=28, contents=[Out,brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=27, contents=[brought,then,15:4,they,Jesus,of,his,10:2,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=26, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=26, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=26, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard,city]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:,heard]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not,thee:]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,said,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[brought,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,unfruitful.,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,all,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,Nathanael,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,healed,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,though]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Jesus,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[saying,,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[saying,,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[saying,,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[saying,,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[there,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[there,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[there,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[itself,there,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[itself,there,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[itself,there,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[itself,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[itself,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[itself,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[itself,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[itself,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[itself,ye,then,15:4,they,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,of,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,But,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,immediately;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,rebuked,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,know,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,in,it,indeed,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,indeed,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,indeed,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,indeed,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,14:26,when,idle,sorrowful,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle,sorrowful,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle,sorrowful,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle,sorrowful,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[persecute,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[when,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,itself,ye,then,15:4,they,eye?,Son,his,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[himself,ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[himself,ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[himself,ye,when,itself,ye,then,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[himself,ye,when,itself,ye,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,eye?,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[himself,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,ye,when,itself,ye,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[when,ye,when,itself,ye,parts,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[when,ye,when,itself,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[when,ye,when,itself,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[when,ye,when,itself,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,ye,when,And,ye,whom,Then,to,15:4,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[when,ye,when,And,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[when,ye,when,And,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[when,ye,when,And,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[when,ye,when,And,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,ye,when,And,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,ye,when,And,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,it,or,the,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,it,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,it,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,it,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,idle]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[when,ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[ye,when,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,and,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[which,ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,to,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,they,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,11:27,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,of,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,groweth,he,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,unto,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[ye,may,ye,whom,Then,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,heard,on,vineyard.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,vineyard.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,vineyard.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,vineyard.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,much,ye,may,ye,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,wolves.,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[much,ye,may,ye,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[him,,much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[him,,much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[him,,much,ye,may,God,,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,Son,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[him,,much,ye,may,God,,white,him,whom,Then,from,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,from,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,from,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,from,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,groweth,a,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto,within]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[him,,much,ye,may,God,,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[him,,much,ye,may,God,,seeth,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,seeth,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[him,,much,ye,may,God,,seeth,his,thy,he,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,ye,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,ye,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,every,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,every,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,every,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[him,,much,every,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[him,,much,every,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[him,,much,every,may,God,,seeth,his,thy,white,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[him,,much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[him,,much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[him,,much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,,much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,to,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,a,baptized,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized,or]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized,or]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized,or]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[save,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[17:13,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[17:13,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[17:13,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we,baptized]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[17:13,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[17:13,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[17:13,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[be,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[be,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[be,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[be,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[be,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[be,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,he,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,them,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,them,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him,much,every,may,God,,seeth,his,thy,him,whom,Then,them,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,we]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,19:16]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,19:16]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them,19:16]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[him,much,every,may,God,,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,much,every,may,God,,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him,much,every,may,by,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[go,him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[go,him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[go,him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[go,him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[go,him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[go,him,much,every,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[go,him,much,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[go,him,much,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[go,him,much,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[go,him,much,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[go,him,much,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[go,him,much,may,by,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,them,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,much,may,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,,testifieth]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[go,him,much,latchet,said,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,,goeth,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,,goeth,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,much,latchet,said,received,seeth,his,thy,whom,Then,greatly,,goeth,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[go,him,much,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,,goeth,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[go,him,much,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,,goeth,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[go,him,much,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,,goeth,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,much,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,much,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,much,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[go,him,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[go,him,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[go,him,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[go,him,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[go,him,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[go,him,latchet,said,I,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[go,him,latchet,said,I,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[go,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[go,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[go,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[house:,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[house:,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[house:,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[house:,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[house:,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[house:,him,latchet,said,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[of,house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[of,house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[of,house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[house:,him,latchet,they,I,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then,greatly,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hour,not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hour,not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hour,not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[hour,not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hour,not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hour,not,house:,him,latchet,they,I,piece,Lord,,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hour,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hour,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hour,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[much,not,house:,him,latchet,they,I,piece,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[much,not,house:,him,latchet,they,I,O,26:38,received,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be,sold]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[much,not,house:,him,latchet,shall,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,shall,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,shall,they,I,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,not,house:,him,latchet,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,not,house:,him,latchet,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,not,house:,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom,Then]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,whom]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[much,not,again,him,latchet,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[much,not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[much,not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[much,not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy,John]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,seeth,his,thy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,thy]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,thy]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,thy]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,again,him,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,24:4]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,24:4]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,24:4]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,24:4]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,24:4]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his,24:4]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,shall,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[not,again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[again,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,same,,latchet,rejoice,24:16,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,again,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[they,them,same,,latchet,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[they,them,same,,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[they,them,same,,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[they,them,same,,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[they,them,same,,rejoice,24:16,the,6:47,he,they,O,26:38,answered,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[they,them,same,,rejoice,24:16,the,6:47,he,they,O,26:38,answered,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[they,them,same,,rejoice,24:16,the,6:47,he,they,O,26:38,answered,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,them,rejoice,24:16,the,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,O,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[they,them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,rejoice,24:16,the,do,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[and,them,rejoice,24:16,the,do,Son,6:47,he,they,The,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[and,them,rejoice,24:16,the,do,Son,do,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[and,them,rejoice,24:16,the,do,Son,do,he,they,The,26:38,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[and,them,rejoice,24:16,the,do,Son,do,he,they,The,26:38,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,answered,,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[them,rejoice,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[he,them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[them,the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,24:16,the,do,Son,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take,things.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[24:16,the,do,Son,20:29,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[24:16,the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[24:16,the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[do,Son,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[do,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[do,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[do,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[do,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[do,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[do,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[about,he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[about,he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[about,he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[about,he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[about,he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[about,he,side,20:29,revealed;,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[about,he,side,20:29,revealed;,it,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[about,he,side,20:29,revealed;,it,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[about,he,side,20:29,revealed;,it,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[he,side,20:29,revealed;,it,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[he,side,20:29,revealed;,it,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[he,side,20:29,revealed;,it,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[he,side,20:29,revealed;,it,me?,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[he,side,20:29,revealed;,it,me?,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[he,side,20:29,revealed;,it,me?,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,saw,me?,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,saw,me?,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,saw,me?,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[he,side,20:29,revealed;,it,saw,me?,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,side,20:29,revealed;,it,saw,me?,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,side,20:29,revealed;,it,saw,me?,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,take]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,take]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[evening,,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[evening,,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[evening,,side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.,I,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.,I,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.,I,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.,I,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.,I,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.,I,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,revealed;,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,And,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,And,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,And,it,went,me?,I,do,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,And,it,went,me?,I,named,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,And,it,went,me?,I,named,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,And,it,went,me?,I,named,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to,again.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to,again.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to,again.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,And,it,went,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,The,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[proceedeth,side,20:29,And,it,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[said,proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[said,proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[said,proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[And,said,proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[And,said,proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[And,said,proceedeth,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,And,it,the,And,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,up,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[What,And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[What,And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[What,And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[What,And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[What,And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[What,And,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[by,,What,power.,said,hath.,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[by,,What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,16:23]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,16:23]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him,16:23]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,named,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,have,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[What,power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[power.,said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[said,hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hath.,was,side,20:29,perish,,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,hath.,was,side,20:29,perish,,11:31,And,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[any,hath.,was,side,20:29,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a,light]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[for,any,hath.,was,side,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[for,any,hath.,was,side,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[for,any,hath.,was,side,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[for,any,hath.,was,side,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[for,any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[any,hath.,was,side,lifted,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[any,hath.,was,side,lifted,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[any,hath.,was,side,lifted,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[any,hath.,was,side,lifted,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[any,hath.,was,side,lifted,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,hath.,was,side,lifted,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,hath.,was,side,lifted,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[any,hath.,was,side,unto,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[any,hath.,was,side,unto,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[any,hath.,was,side,unto,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,I,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,Jesus,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,hath.,was,side,unto,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[any,hath.,was,side,unto,the,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,the,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[any,hath.,was,side,unto,the,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[hath.,was,side,unto,the,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[hath.,was,side,unto,the,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[hath.,was,side,unto,the,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[hath.,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[hath.,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[hath.,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,11:31,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,and,,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[of,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hath,life,was,side,unto,the,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[hath,life,was,side,unto,that,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[hath,life,was,side,unto,that,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[hath,life,was,side,unto,that,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[life,was,side,unto,that,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[life,was,side,unto,that,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[life,was,side,unto,that,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life,was,side,unto,that,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[not,life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[not,life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[not,life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[not,life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[not,life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[not,life,was,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[not,life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[not,life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[not,life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[not,life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[not,life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[not,life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[life,the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[the,side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,mayest]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,publicans,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[side,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,say,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,not,me?,this,him,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,not,me?,this,him,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,come,,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,to,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[fathers,unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,Art,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[unto,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[unto,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[unto,unto,was,do,21:21,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,unto,was,do,21:21,took,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,unto,was,do,21:21,took,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,unto,was,do,21:21,took,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[unto,was,do,21:21,took,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[unto,was,do,21:21,took,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[unto,was,do,21:21,took,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[them,unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[them,unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[them,unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,the,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[them,unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[them,unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[them,unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[unto,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new,25:27]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give,new]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[my,was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[my,was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[my,was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they,give]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[my,was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[my,was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[my,was,the,was,do,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[my,was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[was,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,this,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,the,was,do,me.,21:21,took,in,6:25,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,it,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,the,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,unto,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[I,he,was,do,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[which,I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[which,I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[which,I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,for,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[to,which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,perish,,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[which,I,he,was,Asa,my,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,21:21,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,17:4,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[which,I,he,was,Asa,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[which,I,he,was,Asa,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[which,I,he,was,Asa,into,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[which,I,he,was,Asa,into,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[which,I,he,was,Asa,into,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[which,I,he,was,Asa,into,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[which,I,he,was,Asa,into,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[which,I,he,was,Asa,into,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[which,I,he,was,Asa,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[which,I,he,was,Asa,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[which,I,he,was,Asa,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,me?,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[which,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[his,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[his,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[his,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[his,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[his,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[his,I,he,was,Asa,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,this]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,this]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,reapeth,they,26:59,saying,,as,this]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as,this]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as,this]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as,this]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[his,I,he,was,Herod's,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[his,I,he,was,Herod's,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[his,I,he,was,Herod's,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[his,I,he,was,Herod's,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[his,I,he,was,Herod's,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[his,I,he,was,Herod's,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[his,I,he,was,Herod's,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[his,I,he,was,Herod's,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,as]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,be]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,be]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,,be]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his,I,he,was,Herod's,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[his,I,he,was,certain,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[his,I,he,was,certain,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[his,I,he,was,certain,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[his,I,he,was,certain,his,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[his,I,he,was,certain,his,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[his,I,he,was,certain,his,and,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[his,I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[I,he,was,certain,his,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[I,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[I,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[I,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[I,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[I,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[I,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59,saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[the,hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[the,hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[the,hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[the,hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[the,hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[the,hall,,he,was,certain,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=25, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=25, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=25, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they,26:59]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=24, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=24, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=24, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,took,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[the,hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[hall,,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=19, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=19, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=19, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=20, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,the,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=23, contents=[12:22,But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=23, contents=[12:22,But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=23, contents=[12:22,But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,Jesus,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=21, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=21, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=21, contents=[But,he,was,stand,his,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,and,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,and,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,and,their,the,I,hath,me,10:24,priest's,me.,his,till,in,of,perceived,Moses,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=22, contents=[But,he,was,stand,his,and,their,the,I,hath,me,10:24,priest's,me.,his,makest,in,of,perceived,Moses,have,to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=22, contents=[But,he,was,stand,his,and,their,the,I,hath,me,10:24,priest's,me.,his,makest,in,of,perceived,Moses,have,to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=22, contents=[But,he,was,stand,his,and,their,the,I,hath,me,10:24,priest's,me.,his,makest,in,of,perceived,Moses,have,to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[is,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[is,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[is,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[they,is,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[they,is,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[they,is,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[they,is,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,is,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,is,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[they,is,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[they,is,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[they,is,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[they,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[they,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[they,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[the,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[the,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[the,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Peter,the,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Peter,the,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Peter,the,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[the,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[the,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[the,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Jesus,the,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Jesus,the,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Jesus,the,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Jesus,the,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Jesus,the,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Jesus,the,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Jesus,the,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Jesus,the,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Jesus,the,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[Jesus,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[Jesus,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[Jesus,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Jesus]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[about]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[about]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[about]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[day,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[day,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[day,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[him,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[woman,,him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[woman,,him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[woman,,him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[him,,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[they,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[they,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[they,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[rowing;,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[rowing;,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[might,thou,shall]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[might,thou,shall]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[might,thou,shall]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[thy,might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[thy,might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[thy,might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[thy,might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[thy,might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[thy,might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[heed,,might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[heed,,might,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[heed,,might,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[heed,,might,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[heed,,might,so]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[heed,,might,so]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[heed,,might,so]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[and,might,so]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[and,might,so]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[and,might,so]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,might,so]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,might,so]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,might,so]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,might,so,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,might,so,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,might,so,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,unto,so,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,unto,so,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,unto,so,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,unto,so,his,what]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,unto,so,his,what]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,unto,so,his,what]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,unto,devil.,his,what]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,unto,devil.,his,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,unto,devil.,his,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,unto,devil.,his,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[unto,devil.,his,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[unto,devil.,his,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[unto,devil.,his,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[unto,devil.,his,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[unto,devil.,his,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[unto,devil.,his,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[he,unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[he,unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[he,unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[he,unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[he,unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[he,unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[week,,unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[week,,unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[week,,unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,week,,unto,devil.,his]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[any,week,,unto,devil.,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[any,week,,devil.,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[any,week,,devil.,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[any,week,,devil.,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,week,,devil.,anointed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[any,week,,devil.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[any,week,,prison,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[any,week,,prison,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[any,week,,prison,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[any,week,,prison,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,week,,prison,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,week,,prison,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[any,week,,prison,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[any,week,,prison,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[any,week,,prison,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[any,week,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[any,week,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[any,week,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[any]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[any]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[any]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[saying,,But]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[saying,,But]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[saying,,But]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[saying,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[saying,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[saying,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 1
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[upon]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[which]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[which]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[which]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[adversary.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[adversary.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[adversary.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 3
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[unto,adversary.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[unto,adversary.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[unto,adversary.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[unto,men,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[unto,men,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[unto,men,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[unto,men,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[unto,men,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[unto,men,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[unto,men,,sound]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[unto,men,,sound]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[unto,men,,sound]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[and,men,,sound]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[and,men,,sound]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[and,men,,sound]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[and,men,,sound]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,men,,sound]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,men,,sound]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,men,,sound,mercy,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,men,,sound,mercy,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,men,,sound,mercy,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,men,,sound,mercy,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,men,,sound,mercy,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,men,,sound,mercy,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,men,,sound,mercy,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,men,,sound,mercy,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,men,,sound,mercy,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[and,Jesus,sound,mercy,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[and,Jesus,sound,mercy,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[and,Jesus,sound,mercy,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[and,Jesus,sound,mercy,,and,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[Jesus,sound,mercy,,and,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 7
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[Jesus,sound,mercy,,and,the,her;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[Jesus,sound,mercy,,and,the,her;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[Jesus,sound,mercy,,and,the,her;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Jesus,sound,mercy,,and,the,her;,5:42]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Jesus,sound,mercy,,and,the,her;,5:42]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Jesus,sound,mercy,,and,the,her;,5:42]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,the,her;,5:42,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,the,her;,5:42,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,the,her;,5:42,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,the,her;,body,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,the,her;,body,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,the,her;,body,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,her;,body,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Jesus,sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,wide]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body,when]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Wherefore,sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[sound,mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[sound,mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[mercy,,and,Feed,him,her;,body,I]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[mercy,,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[said,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[said,and,Feed,him,her;,body]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[said,and,Feed,him,her;,body]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[said,and,Feed,him,her;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[said,and,Feed,him,her;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[said,and,Feed,him,her;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[said,and,Feed,him,her;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[said,and,Feed,him,her;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[said,and,Feed,him,her;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[said,and,Feed,him,her;,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[said,and,Feed,him,her;,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[said,and,Feed,him,her;,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[said,and,Feed,him,her,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[said,and,Feed,him,her,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[said,and,Feed,him,her,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[said,and,Feed,him,her,They,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[said,and,Feed,him,her,They,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[said,and,Feed,him,her,They,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[unto,said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[unto,said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[unto,said,and,Feed,him,They,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[unto,said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[unto,said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[unto,said,and,Feed,him,They,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[said,and,Feed,him,They,that]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[said,and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[said,and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[said,and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,Feed,him,They]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,Feed,him,27:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,Feed,him,27:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,Feed,him,27:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[and,Feed,him,27:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[and,Feed,him,27:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[and,Feed,him,27:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,Feed,him,27:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,Feed,him,27:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,Feed,him,27:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Feed,him,27:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Feed,him,27:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Feed,him,27:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[Feed,sheep,27:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[up:,sheep,27:1]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[up:,sheep,27:1]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[up:,sheep,27:1]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[up:,sheep,Hallowed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[up:,sheep,Hallowed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[up:,sheep,Hallowed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[all,up:,sheep,Hallowed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[all,up:,sheep,Hallowed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[all,up:,sheep,Hallowed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[all,up:,sheep,Hallowed]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[all,up:,sheep,Hallowed]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[all,up:,sheep,Hallowed]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[all,up:,sheep]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[all,up:,sheep]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[all,up:,sheep]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[all,up:,sheep]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[all,up:,sheep]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[all,up:,sheep]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[fine,all,up:,sheep]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[fine,all,up:,sheep]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[fine,all,up:,sheep]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[fine,all,up:,sheep]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[fine,all,up:,sheep]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[fine,all,up:,sheep]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[fine,all,up:,him;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[fine,all,up:,him;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[fine,all,up:,him;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[fine,all,up:,him;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[fine,all,up:,him;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[fine,all,up:,him;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[fine,to,up:,him;]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[fine,to,up:,him;]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[fine,to,up:,him;]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[fine,to,up:,him;,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[fine,to,up:,him;,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[fine,to,up:,him;,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[fine,to,up:,him;,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,to,up:,him;,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,to,up:,him;,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[fine,to,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[fine,to,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[fine,to,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[fine,to,up:,build,wife,,himself]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[fine,to,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[fine,to,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[fine,to,up:,build,wife,,himself]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,,himself]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 6
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,him,,up:,build,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,ring]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,ring]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[fine,him,,up:,build,wife,,ring]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[fine,him,,up:,build,wife,,have,ring]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[fine,him,,up:,build,wife,,have,ring]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[fine,him,,up:,build,wife,,have,ring]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,fine,him,,up:,build,wife,,have,ring]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,fine,him,,up:,build,wife,,have,ring]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,fine,him,,up:,build,wife,,have,ring]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,fine,him,,up:,build,Eloi,,wife,,have,ring]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,fine,him,,up:,build,Eloi,,wife,,have,ring]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,fine,him,,up:,build,Eloi,,wife,,have,ring]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,fine,him,,up:,they,Eloi,,wife,,have,ring]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,fine,him,,up:,they,Eloi,,wife,,have,ring]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,fine,him,,up:,they,Eloi,,wife,,have,ring]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[fine,him,,up:,they,Eloi,,wife,,have,ring]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[fine,him,,up:,they,Eloi,,wife,,have,ring]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[fine,him,,up:,they,Eloi,,wife,,have,ring]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[fine,him,,up:,they,Eloi,,wife,,have,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[fine,him,,up:,they,Eloi,,wife,,have,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[fine,him,,up:,they,Eloi,,wife,,have,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[fine,him,,up:,they,Eloi,,wife,,have,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,him,,up:,they,Eloi,,wife,,have,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,him,,up:,they,Eloi,,wife,,have,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[fine,him,,up:,they,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[nor,their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[nor,their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[nor,their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[which,nor,their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[which,nor,their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[which,nor,their,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[which,nor,the,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[which,nor,the,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[which,nor,the,fine,him,,up:,down,Eloi,,wife,,have,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[which,nor,the,fine,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[which,nor,the,fine,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[which,nor,the,fine,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[be,which,nor,the,fine,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[be,which,nor,the,fine,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[be,which,nor,the,fine,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[be,which,nor,the,fine,us,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[be,which,nor,the,fine,us,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[be,which,nor,the,fine,us,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[be,which,nor,the,fine,us,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[be,which,nor,the,fine,us,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[be,which,nor,the,fine,us,him,,up:,down,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[be,which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[be,which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[be,which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[be,which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[be,which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[be,which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[which,nor,the,fine,us,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[which,nor,the,fine,us,man,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[which,nor,the,fine,us,man,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[which,nor,the,fine,us,man,him,,up:,Eloi,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[which,nor,the,fine,us,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[which,nor,the,fine,us,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[which,nor,the,fine,us,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[which,nor,the,fine,foolish,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[which,nor,the,fine,foolish,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[which,nor,the,fine,foolish,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[which,nor,the,fine,foolish,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[which,nor,the,fine,foolish,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[which,nor,the,fine,foolish,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[which,nor,the,fine,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[begged,which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[begged,which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[begged,which,nor,the,That,foolish,a,man,him,,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[begged,which,nor,the,That,foolish,a,man,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,foolish,a,man,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,foolish,a,man,up:,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,fast,,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,fast,,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,fast,,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If,Son]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,,saw,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,,saw]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,,saw]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,,saw]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,a,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[begged,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[took,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[took,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[took,which,nor,the,That,on,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,,wife,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[took,which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[which,nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[nor,the,That,priests,that,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,John,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[nor,the,That,priests,ye,foolish,forgive,man,judge,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,judge,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[went,nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[nor,the,That,priests,ye,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[nor,the,That,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[nor,the,hill,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[nor,the,hill,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[nor,the,hill,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,The]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,hill,priests,ye,have,as,foolish,forgive,man]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,hill,priests,ye,have,as,foolish,forgive,man]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,hill,priests,ye,have,as,foolish,forgive,man]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,man,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19,said,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19,said,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,have,as,foolish,forgive,ye,And,thou,8:20,20:19,said,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19,said,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19,said,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19,said,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[15:16,for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[15:16,for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[15:16,for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19,of]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19,of]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19,of]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[for,the,hill,priests,ye,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[times,for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[for,the,hill,priests,ye,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[for,the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[for,the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[for,the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20,20:19]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[the,hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[hill,priests,ye,in,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[hill,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou,8:20]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[a,priests,ye,was,from,and,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[a,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[a,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[a,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,bread,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,bread,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,bread,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[that,an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[that,an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[that,an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[that,an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[that,an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[that,an,of,priests,ye,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[that,an,of,priests,ye,said,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[that,an,of,priests,ye,said,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[that,an,of,priests,ye,said,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[were,an,of,priests,ye,said,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[were,an,of,priests,ye,said,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[were,an,of,priests,ye,said,was,from,have,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[were,an,of,priests,ye,said,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[And,,were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[And,,were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[And,,were,an,of,priests,ye,thy,was,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[And,,were,an,of,priests,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[And,,were,an,of,priests,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[And,,were,an,of,priests,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=18, contents=[And,,were,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=18, contents=[And,,were,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=18, contents=[And,,were,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[were,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[were,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[were,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[when,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[when,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[when,an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,as,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=17, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=17, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=17, contents=[Mathusala,,an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[an,of,priests,the,ye,thy,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=16, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=16, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=16, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32,5:30]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men,3:32]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,together,waves:,from,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou,men]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,thou]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[an,of,priests,the,ye,asked,together,sand:,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,together,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,priests,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And,he]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,And]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[an,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[hard,and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[that,of,and,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=15, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,forgive,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[judgment,and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,Pharisees,,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[a,and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[a,and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[a,and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[a,and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[a,and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[a,and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[that,of,pounds,,the,ye,asked,they,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[that,of,pounds,,the,ye,asked,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[that,of,pounds,,the,ye,asked,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[that,of,pounds,,the,ye,asked,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[that,of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[that,of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[that,of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[of,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Nephthalim,,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Nephthalim,,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Nephthalim,,pounds,,the,ye,unto,from,foolish,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye,it]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye,it]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye,it]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,ye]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[Nephthalim,,pounds,,the,ye,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[5:7,Nephthalim,,pounds,,the,ye,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[5:7,Nephthalim,,pounds,,the,ye,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[5:7,Nephthalim,,pounds,,the,ye,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[5:7,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If,they]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[to,And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[to,And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[to,And,Nephthalim,,pounds,,the,ye,calleth,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Can,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,from,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Then,to,And,Nephthalim,,pounds,,the,ye,unto,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto,If]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto,If]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto,If]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Then,to,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Ye,Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Ye,Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Ye,Then,son,And,Nephthalim,,pounds,,the,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,the,the,ye,unto,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,the,the,ye,unto,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,the,the,ye,unto,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[put,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[put,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[put,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[put,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[put,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[put,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto,not]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[not,Ye,Then,son,And,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,Ye,Then,son,And,that,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,Ye,Then,son,And,that,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,Ye,Then,son,And,that,Nephthalim,,pounds,,them,the,ye,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,Ye,Then,son,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,Ye,Then,son,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,Ye,Then,son,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,Ye,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,For,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,For,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,For,Then,head.,And,that,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[not,For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[not,For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[not,For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[For,Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[Then,head.,And,was,Nephthalim,,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Then,head.,And,was,Nephthalim,,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Then,head.,And,was,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Then,head.,And,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Then,head.,And,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Then,head.,And,Nephthalim,,he,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set,given,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Then,head.,And,Nephthalim,,shall,far,pounds,,them,the,said,unto,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said,unto,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said,unto,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said,unto,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said,unto]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said,unto]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said,unto]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[Then,head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[head.,And,Nephthalim,,shall,far,was,them,the,said]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[head.,And,Nephthalim,,shall,far,was,them,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,shall,far,was,them,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,shall,far,was,them,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[head.,And,Nephthalim,,shall,far,was,them,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,shall,far,was,them,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,shall,far,was,them,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[child,,head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[child,,head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[child,,head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[child,,head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[child,,head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[child,,head.,And,Nephthalim,,shall,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[child,,head.,And,Nephthalim,,shall,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[child,,head.,And,Nephthalim,,shall,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[child,,head.,And,Nephthalim,,shall,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[child,,head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[child,,head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[child,,head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[head.,And,Nephthalim,,planted,him.,far,was,them]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[head.,And,Nephthalim,,planted,him.,far,was]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[head.,And,Nephthalim,,planted,him.,far,was]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[head.,And,Nephthalim,,planted,him.,far,was]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[head.,And,Nephthalim,,planted,him.,far]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[head.,And,Nephthalim,,planted,him.,far]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[head.,And,Nephthalim,,planted,him.,far]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[head.,And,Nephthalim,,planted,him.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[head.,And,Nephthalim,,planted,him.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[head.,And,Nephthalim,,planted,him.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[head.,And,Nephthalim,,planted,him.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[head.,for,Nephthalim,,planted,him.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[head.,for,Nephthalim,,planted,him.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[head.,for,Nephthalim,,planted,him.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[lawful,head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[lawful,head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[lawful,head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[for,season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[for,season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[for,season.,lawful,head.,for,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[for,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[for,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[for,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[bringeth,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,great]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[thou,Have,season.,lawful,head.,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[thou,Have,season.,lawful,head.,14:33,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[thou,Have,season.,lawful,head.,14:33,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[thou,Have,season.,lawful,head.,14:33,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Have,season.,lawful,head.,14:33,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Have,season.,lawful,head.,14:33,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Have,season.,lawful,head.,14:33,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[Have,season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[season.,lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[lawful,head.,14:33,away;,for,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[lawful,head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[lawful,head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[lawful,head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[lawful,head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[lawful,head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[lawful,head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[head.,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[two,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[two,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[two,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,Nephthalim,,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[two,14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[14:33,away;,for,he,This,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[14:33,away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[away;,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in,compassion]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Word,,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Word,,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Word,,for,he,This,24:20,that,planted,him.,Sarepta,,sent,in]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=11, contents=[Word,,for,he,This,24:20,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=11, contents=[Word,,for,he,This,24:20,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=11, contents=[Word,,for,he,This,24:20,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=12, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=12, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=12, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=14, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=14, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=14, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[for,Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Word,,for,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Word,,on,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Word,,on,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Word,,on,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=13, contents=[Word,,on,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=13, contents=[Word,,on,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=13, contents=[Word,,on,he,This,24:20,down,that,planted,him.,Sarepta,,sent,knew,a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[a]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[a]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[a]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[sayest]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[sayest]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[sayest]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[sayest]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[sayest]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[sayest]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[sayest]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[sayest]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[sayest]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=operator[]: No element at position 0
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_back: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 4
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 12
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=<empty list>
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=pop_front: Can't pop: list is empty
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[to]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=2, contents=[to,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=2, contents=[to,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=2, contents=[to,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[to,the,locusts]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[to,the,locusts]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[to,the,locusts]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[to,the,out]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[to,the,out]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[to,the,out]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=3, contents=[of,the,out]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=3, contents=[of,the,out]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=3, contents=[of,the,out]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[of,the,out,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[of,the,out,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[of,the,out,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[at,of,the,out,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[at,of,the,out,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[at,of,the,out,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[at,of,the,out,is]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[at,of,the,out,is]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[at,of,the,out,is]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[at,of,the,out]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[at,of,the,out]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[at,of,the,out]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=4, contents=[at,of,the,out]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=4, contents=[at,of,the,out]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=4, contents=[at,of,the,out]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=insert: Position is outside of the list: 5
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[men's,at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[country.,high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[country.,high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[country.,high,men's,at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,Why]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[high,men's,at,of,the,out]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[high,men's,at,of,the,out]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[high,men's,at,of,the,out]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[high,men's,at,of,the,out]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[high,men's,at,of,the,out]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[high,men's,at,of,the,out]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[high,men's,at,of,the,out,therefore]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,therefore]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[high,men's,at,of,the,out,therefore]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 16
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[men's,at,of,the,out,therefore]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[men's,at,of,the,out,therefore]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[men's,at,of,the,out,therefore]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[men's,at,of,the,out,13:5,therefore]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[men's,at,of,the,out,13:5,therefore]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[men's,at,of,the,out,13:5,therefore]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[men's,at,plain.,the,out,13:5,therefore]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[men's,at,plain.,the,out,13:5]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[men's,at,plain.,the,out,13:5]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[men's,at,plain.,the,out,13:5]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[at,plain.,the,out,13:5]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[at,plain.,the,out,13:5]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[at,plain.,the,out,13:5]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[at,plain.,the,out,13:5,another,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[at,plain.,the,out,13:5,another,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[at,plain.,the,out,13:5,another,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[at,plain.,the,out,13:5,another,]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[at,plain.,the,out,13:5,another,]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[at,plain.,the,out,13:5,another,]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=5, contents=[at,plain.,the,out,13:5]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=5, contents=[at,plain.,the,out,13:5]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=5, contents=[at,plain.,the,out,13:5]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[at,plain.,the,out,13:5,joy.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[at,plain.,the,out,13:5,joy.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[at,plain.,the,out,13:5,joy.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=1, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[at,plain.,the,out,13:5,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[at,plain.,the,out,month,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[at,plain.,the,out,month,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[at,plain.,the,out,month,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[at,plain.,the,out,month,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[at,plain.,the,out,month,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[at,plain.,the,out,month,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[at,plain.,the,and,month,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[at,plain.,the,and,month,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[at,plain.,the,and,month,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 13
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[at,plain.,the,and,month,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[at,plain.,the,and,month,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[at,plain.,the,and,month,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=6, contents=[plain.,the,and,month,joy.,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=6, contents=[plain.,the,and,month,joy.,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=6, contents=[plain.,the,and,month,joy.,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[plain.,the,and,month,joy.,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[plain.,the,and,month,joy.,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[plain.,the,and,month,joy.,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[plain.,the,and,month,joy.,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[plain.,the,and,month,joy.,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[plain.,the,and,month,joy.,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[plain.,the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[plain.,the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[plain.,the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[plain.,the,and,month,joy.,the,suffer,and,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[plain.,the,and,month,joy.,the,suffer,and,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[plain.,the,and,month,joy.,the,suffer,and,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 11
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 19
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,on]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,on]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,on]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 17
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,the]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,the]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,the]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[and,month,joy.,the,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[and,month,joy.,slept,,suffer,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[and,month,joy.,slept,,suffer,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[and,month,joy.,slept,,suffer,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=remove: No element at position 18
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[and,month,joy.,slept,,suffer,away,,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,suffer,away,,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,suffer,away,,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[and,month,joy.,slept,,suffer,away,,and,saith]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,suffer,away,,and,saith]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,suffer,away,,and,saith]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[and,month,joy.,slept,,suffer,away,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[and,month,joy.,slept,,suffer,away,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[and,month,joy.,slept,,suffer,away,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,month,joy.,slept,,suffer,away,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,month,joy.,slept,,suffer,away,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,month,joy.,slept,,suffer,away,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 9
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[and,month,joy.,slept,,the,away,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[and,month,joy.,slept,,the,away,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[and,month,joy.,slept,,the,away,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[and,month,joy.,slept,,the,away,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[and,month,joy.,slept,,the,away,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[and,month,joy.,slept,,the,away,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,away,,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,23:17,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,23:17,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,23:17,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,23:17,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,23:17,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[and,month,joy.,slept,,the,into,23:17,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[and,month,joy.,slept,,the,unto,into,23:17,and]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[and,month,joy.,slept,,the,unto,into,23:17,and]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[and,month,joy.,slept,,the,unto,into,23:17,and]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 10
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=10, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=10, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=10, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[and,month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,23:17,and,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: PSLL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: SDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Running operation
Implementation: CDAL
Source code:
                //test both the copy constructer and assigner
                L copied_list(l);
                l = copied_list;
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,and,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[month,joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[joy.,slept,,the,unto,into,the,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,the,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,his,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,his,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,his,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,his,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,his,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[joy.,slept,,the,unto,into,I,his,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[joy.,slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[joy.,slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[joy.,slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[joy.,slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[joy.,slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[joy.,slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[slept,,the,used,into,I,his,one,This]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[slept,,the,used,into,I,his,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[slept,,the,used,into,I,his,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[slept,,the,used,into,I,his,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 14
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[slept,,the,used,into,I,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[slept,,the,used,into,I,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[slept,,the,used,into,I,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.insert(rand_val, 5);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[slept,,the,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[slept,,the,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[slept,,the,used,into,I,darkness,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[slept,,the,used,into,I,darkness,at,one,perish.]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[slept,,the,used,into,I,darkness,at,one,perish.]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[slept,,the,used,into,I,darkness,at,one,perish.]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[slept,,the,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[slept,,the,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[slept,,the,used,into,I,darkness,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_front();
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[the,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[the,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[the,used,into,I,darkness,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=item_at: No element at position 15
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[is,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[is,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[is,used,into,I,darkness,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[cross.,is,used,into,I,darkness,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[cross.,alms,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[cross.,alms,used,into,I,darkness,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[cross.,alms,used,into,I,darkness,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                return l.is_empty();
Running operation
Implementation: PSLL
Source code:
                return l.is_empty();
Running operation
Implementation: SDAL
Source code:
                return l.is_empty();
Running operation
Implementation: CDAL
Source code:
                return l.is_empty();
Verifying output from PSLL
Test passed: ret=0, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,at,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                l.remove(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[cross.,alms,used,into,I,him,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=7, contents=[cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=7, contents=[cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=7, contents=[cross.,alms,used,into,I,him,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                ret_item = l.replace(rand_val, rand_int(10));
                return l.size();
Verifying output from PSLL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from SDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Verifying output from CDAL
Test passed: ret=1, contents=
error_message=replace: No element at position 8
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_front(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l[rand_int(l.size())];
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,same]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.pop_back();
                return l.size();
Verifying output from PSLL
Test passed: ret=8, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=8, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=8, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Verifying output from PSLL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                auto rand_val = rv();
                l.push_back(rand_val);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: PSLL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: SDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Running operation
Implementation: CDAL
Source code:
                if (rand_int(100) == 1) {
                    //dont do this very often, we want big lists
                    l.clear();
                }
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: PSLL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: SDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Running operation
Implementation: CDAL
Source code:
                if (rand_int(500) == 1) {
                    //acutely grow then shrink the list, leaving a bunch still in the list
                    for (int i = 0; i < 1000; ++i) {
                        l.push_front(rv());
                        l.push_back(rv());
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        l.insert(rv(), rand_slot);
                    }
                    for (int i = 0; i < 800; ++i) {
                        ret_item = ret_item + l.pop_front();
                        ret_item = ret_item + l.pop_back();
                        int sz = l.size();
                        int rand_slot = rand_int(sz);
                        ret_item = ret_item + l.remove(rand_slot);
                    }
                    return l.size();
                } else {
                    return 0;
                }
Verifying output from PSLL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=0, contents=[the,cross.,alms,used,into,I,him,one,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,him]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,him]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,him]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: PSLL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: SDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Running operation
Implementation: CDAL
Source code:
                size_t i = rand_int(l.size());
                l[i] = rv();
                ret_item = l.item_at(i);
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: PSLL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: SDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Running operation
Implementation: CDAL
Source code:
                ret_item = l.item_at(rand_int(20));
                return l.size();
Verifying output from PSLL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,set]
error_message=
--------------------
Verifying output from SDAL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,set]
error_message=
--------------------
Verifying output from CDAL
Test passed: ret=9, contents=[the,comfortless:,alms,used,into,I,him,one,set]
error_message=
--------------------
Running operation
Implementation: SSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: PSLL
Source code:
                auto rand_val = rv();
                return l.contains(rand_val, [](const T& a, const T& b) -> bool { return a == b; });
Running operation
Implementation: SDAL
