
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
unit_tester is a Catch v1.0 b11 host application.
Run with -? for options

-------------------------------------------------------------------------------
Scenario: List item searching
     Given: An integer list that has been grown and shrunk acutely
-------------------------------------------------------------------------------
contains.cpp:5
...............................................................................

contains.cpp:18: 
PASSED:
  REQUIRE( ! l.contains(-1, [](const int& a, const int& b) -> bool { return a == b; }) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: List item searching
     Given: An integer list that has been grown and shrunk acutely
-------------------------------------------------------------------------------
contains.cpp:5
...............................................................................

contains.cpp:18: 
PASSED:
  REQUIRE( ! l.contains(-1, [](const int& a, const int& b) -> bool { return a == b; }) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: List item searching
     Given: An integer list that has been grown and shrunk acutely
-------------------------------------------------------------------------------
contains.cpp:5
...............................................................................

contains.cpp:18: 
PASSED:
  REQUIRE( ! l.contains(-1, [](const int& a, const int& b) -> bool { return a == b; }) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: List item searching
     Given: An integer list that has been grown and shrunk acutely
      When: An item is inserted
      Then: The list contains the item
-------------------------------------------------------------------------------
contains.cpp:5
...............................................................................

contains.cpp:22: 
PASSED:
  REQUIRE( l.contains(-1, [](const int& a, const int& b) -> bool { return a == b; }) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: List item searching
     Given: An integer list that has been grown and shrunk acutely
-------------------------------------------------------------------------------
contains.cpp:5
...............................................................................

contains.cpp:18: 
PASSED:
  REQUIRE( ! l.contains(-1, [](const int& a, const int& b) -> bool { return a == b; }) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: List item searching
     Given: An integer list that has been grown and shrunk acutely
-------------------------------------------------------------------------------
contains.cpp:5
...............................................................................

contains.cpp:18: 
PASSED:
  REQUIRE( ! l.contains(-1, [](const int& a, const int& b) -> bool { return a == b; }) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: List item searching
     Given: An integer list that has been grown and shrunk acutely
      When: An item is inserted
  And when: The list is cleared
      Then: The list no longer contains the item
-------------------------------------------------------------------------------
contains.cpp:5
...............................................................................

contains.cpp:27: 
PASSED:
  REQUIRE( ! l.contains(-1, [](const int& a, const int& b) -> bool { return a == b; }) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: List copying
     Given: An integer list that has been grown and shrunk acutely
      When: The list is copied via copy constructor
      Then: The item has the expected value
-------------------------------------------------------------------------------
copying.cpp:5
...............................................................................

copying.cpp:22: 
PASSED:
  REQUIRE( item == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: List copying
     Given: An integer list that has been grown and shrunk acutely
      When: The list is copied via copy constructor
  And when: We try to change the value of the item
      Then: The value changes in the copy but not the original
-------------------------------------------------------------------------------
copying.cpp:5
...............................................................................

copying.cpp:27: 
PASSED:
  REQUIRE( l2[42] == 5 )
with expansion:
  5 == 5

copying.cpp:28: 
PASSED:
  REQUIRE( l[42] == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: List copying
     Given: An integer list that has been grown and shrunk acutely
      When: A second list has been grown and shrunk acutely
  And when: The second list's copy assigner is invoked with the original list
            as the source
      Then: The two items contain the same contents
-------------------------------------------------------------------------------
copying.cpp:5
...............................................................................

copying.cpp:50: 
PASSED:
  REQUIRE( l_contents.str() == l2_contents.str() )
with expansion:
  "[999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981
  ,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962
  ,961,960,959,958,-1,957,956,955,954,953,952,951,950,949,948,947,946,945,944
  ,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925
  ,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906
  ,905,904,903,902,901]"
  ==
  "[999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981
  ,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962
  ,961,960,959,958,-1,957,956,955,954,953,952,951,950,949,948,947,946,945,944
  ,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925
  ,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906
  ,905,904,903,902,901]"

-------------------------------------------------------------------------------
Scenario: List copying
     Given: An integer list that has been grown and shrunk acutely
      When: A second list has been grown and shrunk acutely
  And when: The second list's copy assigner is invoked with the original list
            as the source
  And when: We change the value of an item in the list copy
      Then: The value changes in the copy but not the original
-------------------------------------------------------------------------------
copying.cpp:5
...............................................................................

copying.cpp:55: 
PASSED:
  REQUIRE( l2[42] == 5 )
with expansion:
  5 == 5

copying.cpp:56: 
PASSED:
  REQUIRE( l[42] == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted
      Then: The size increases by 1
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:19: 
PASSED:
  REQUIRE( l.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted
       And: Printing the contents reflects the inserted item
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:24: 
PASSED:
  REQUIRE( new_contents.str() == "[1337]" )
with expansion:
  "[1337]" == "[1337]"

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted
  And when: An item is inserted at the end of the list
      Then: The size increases by 1
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:29: 
PASSED:
  REQUIRE( l.size() == 2 )
with expansion:
  2 == 2

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted
  And when: An item is inserted at the end of the list
       And: Printing the contents reflects the inserted item
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:34: 
PASSED:
  REQUIRE( new_contents.str() == "[1337,42]" )
with expansion:
  "[1337,42]" == "[1337,42]"

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted
  And when: An item is inserted at the end of the list
  And when: An item is pushed back
      Then: The size increases by 1
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:39: 
PASSED:
  REQUIRE( l.size() == 3 )
with expansion:
  3 == 3

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted
  And when: An item is inserted at the end of the list
  And when: An item is pushed back
       And: Printing the contents reflects the inserted item
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:44: 
PASSED:
  REQUIRE( new_contents.str() == "[1337,42,100]" )
with expansion:
  "[1337,42,100]" == "[1337,42,100]"

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted
  And when: An item is inserted at the end of the list
  And when: An item is pushed front
      Then: The size increases by 1
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:50: 
PASSED:
  REQUIRE( l.size() == 3 )
with expansion:
  3 == 3

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted
  And when: An item is inserted at the end of the list
  And when: An item is pushed front
       And: Printing the contents reflects the inserted item
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:55: 
PASSED:
  REQUIRE( new_contents.str() == "[100,1337,42]" )
with expansion:
  "[100,1337,42]" == "[100,1337,42]"

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: An item is inserted out of bounds
      Then: The list throws an out of range error
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:63: 
PASSED:
  REQUIRE_THROWS_AS( l.insert(1234, 1000) )

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:9: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

insert.cpp:12: 
PASSED:
  REQUIRE( contents.str() == "<empty list>" )
with expansion:
  "<empty list>" == "<empty list>"

insert.cpp:14: 
PASSED:
  REQUIRE( l.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List insertion
     Given: An empty integer list
      When: 1000 items are inserted using various methods
      Then: The size increases by 1000
-------------------------------------------------------------------------------
insert.cpp:5
...............................................................................

insert.cpp:76: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: A regular and const iterator object are instantiated
      Then: The fresh iterators are equivalent to the end iterator
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:16: 
PASSED:
  REQUIRE( const_iter == const_iter_end )
with expansion:
  {?} == {?}

iterators.cpp:17: 
PASSED:
  REQUIRE( iter == iter_end )
with expansion:
  {?} == {?}

iterators.cpp:18: 
PASSED:
  REQUIRE_THROWS_AS( *const_iter )

iterators.cpp:19: 
PASSED:
  REQUIRE_THROWS_AS( *iter )

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
      Then: A regular or const iterator traversing the list should visit size()
            slots
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:41: 
PASSED:
  REQUIRE( iter_counter == sz )
with expansion:
  10 == 10

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:52: 
PASSED:
  REQUIRE( iter != l.end() )
with expansion:
  {?} != {?}

iterators.cpp:53: 
PASSED:
  REQUIRE( iter == iter2 )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:52: 
PASSED:
  REQUIRE( iter != l.end() )
with expansion:
  {?} != {?}

iterators.cpp:53: 
PASSED:
  REQUIRE( iter == iter2 )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
      Then: Post-increment returns the unincremented iterator
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:56: 
PASSED:
  REQUIRE( i_copy == iter++ )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:52: 
PASSED:
  REQUIRE( iter != l.end() )
with expansion:
  {?} != {?}

iterators.cpp:53: 
PASSED:
  REQUIRE( iter == iter2 )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
      Then: Post-increment returns the unincremented iterator
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:56: 
PASSED:
  REQUIRE( i_copy == iter++ )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
      Then: Post-increment returns the unincremented iterator
      Then: Post-increment incremented the original iterator
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:58: 
PASSED:
  REQUIRE( *iter == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:52: 
PASSED:
  REQUIRE( iter != l.end() )
with expansion:
  {?} != {?}

iterators.cpp:53: 
PASSED:
  REQUIRE( iter == iter2 )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
      Then: Pre-increment returns the incremented iterator
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:64: 
PASSED:
  REQUIRE( i_copy != incremented )
with expansion:
  {?} != {?}

iterators.cpp:66: 
PASSED:
  REQUIRE( i_copy == incremented )
with expansion:
  {?} == {?}

iterators.cpp:67: 
PASSED:
  REQUIRE( i_copy == iter )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:52: 
PASSED:
  REQUIRE( iter != l.end() )
with expansion:
  {?} != {?}

iterators.cpp:53: 
PASSED:
  REQUIRE( iter == iter2 )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
       And: The reassigned iterator can re-read the list and verify its new
            contents
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  0 == 0

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  1 == 1

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  2 == 2

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  3 == 3

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  4 == 4

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  5 == 5

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  6 == 6

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  7 == 7

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  8 == 8

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  9 == 9

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:52: 
PASSED:
  REQUIRE( iter != l.end() )
with expansion:
  {?} != {?}

iterators.cpp:53: 
PASSED:
  REQUIRE( iter == iter2 )
with expansion:
  {?} == {?}

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
       And: The reassigned iterator can re-read the list and verify its new
            contents
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  0 == 0

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  1 == 1

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  2 == 2

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  3 == 3

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  4 == 4

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  5 == 5

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  6 == 6

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  7 == 7

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  8 == 8

iterators.cpp:72: 
PASSED:
  REQUIRE( *iter == slot++ )
with expansion:
  9 == 9

-------------------------------------------------------------------------------
Scenario: List iterators
     Given: An empty integer list
      When: The list is grown and shrunk acutely
  And when: The client regular iterator shoud be able to change the contents of
            the list
      Then: The iterator can be reassigned
       And: The reassigned iterator can re-read the list and verify its new
            contents
       And: The reassigned iterator, which is at the end of the list, cannot be
            incremented anymore
-------------------------------------------------------------------------------
iterators.cpp:5
...............................................................................

iterators.cpp:75: 
PASSED:
  REQUIRE_THROWS_AS( ++iter )

-------------------------------------------------------------------------------
Scenario: List item random access
     Given: An integer list that has been grown and shrunk acutely
      When: An item is retrieved via item_at()
      Then: The item has the expected value
-------------------------------------------------------------------------------
random_access.cpp:5
...............................................................................

random_access.cpp:22: 
PASSED:
  REQUIRE( item == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: List item random access
     Given: An integer list that has been grown and shrunk acutely
      When: An out of bounds position is passed to item_at()
      Then: The list throws an out-of-range error
-------------------------------------------------------------------------------
random_access.cpp:5
...............................................................................

random_access.cpp:28: 
PASSED:
  REQUIRE_THROWS_AS( l.item_at(4000) )

-------------------------------------------------------------------------------
Scenario: List item random access
     Given: An integer list that has been grown and shrunk acutely
      When: An out of bounds position is passed to operator[]
      Then: The list throws an out-of-range error
-------------------------------------------------------------------------------
random_access.cpp:5
...............................................................................

random_access.cpp:33: 
PASSED:
  REQUIRE_THROWS_AS( l.operator[](4000) )

-------------------------------------------------------------------------------
Scenario: List item random access
     Given: An integer list that has been grown and shrunk acutely
      When: An out of bounds position is passed to const operator[]
      Then: The list throws an out-of-range error
-------------------------------------------------------------------------------
random_access.cpp:5
...............................................................................

random_access.cpp:38: 
PASSED:
  REQUIRE_THROWS_AS( (const int&)l.operator[](4000) )

-------------------------------------------------------------------------------
Scenario: List item random access
     Given: An integer list that has been grown and shrunk acutely
      When: An item is retrieved via operator[]
      Then: The item has the expected value
-------------------------------------------------------------------------------
random_access.cpp:5
...............................................................................

random_access.cpp:45: 
PASSED:
  REQUIRE( item == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: List item random access
     Given: An integer list that has been grown and shrunk acutely
      When: An item is retrieved via operator[]
  And when: We try to change the value of the item
      Then: Both our local item and the item stored in the list change
-------------------------------------------------------------------------------
random_access.cpp:5
...............................................................................

random_access.cpp:50: 
PASSED:
  REQUIRE( item == 5 )
with expansion:
  5 == 5

random_access.cpp:51: 
PASSED:
  REQUIRE( l.item_at(42) == 5 )
with expansion:
  5 == 5

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
      When: An item is removed
      Then: The size decreases by 1
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:21: 
PASSED:
  REQUIRE( l.size() == 999 )
with expansion:
  999 == 999

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
      When: An item is removed
       And: The returned value has the expected value
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:24: 
PASSED:
  REQUIRE( ret_val == 42 )
with expansion:
  42 == 42

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
      When: An attempt is made to remove an item from out of bounds
      Then: The list throws an out of range error
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:30: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(1000) )

remove.cpp:31: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(2000) )

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
      When: An item is popped from the back
      Then: The list size decreases by 1
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:38: 
PASSED:
  REQUIRE( l.size() == 999 )
with expansion:
  999 == 999

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
      When: An item is popped from the back
       And: The returned value has the expected value
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:41: 
PASSED:
  REQUIRE( ret_val == 999 )
with expansion:
  999 == 999

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
      When: An item is popped from the front
      Then: The list size decreases by 1
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:48: 
PASSED:
  REQUIRE( l.size() == 999 )
with expansion:
  999 == 999

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:9: 
PASSED:
  REQUIRE_THROWS_AS( l.remove(0) )

remove.cpp:10: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_front() )

remove.cpp:11: 
PASSED:
  REQUIRE_THROWS_AS( l.pop_back() )

remove.cpp:16: 
PASSED:
  REQUIRE( l.size() == 1000 )
with expansion:
  1000 == 1000

-------------------------------------------------------------------------------
Scenario: List removal
     Given: An integer list with 1000 items
      When: An item is popped from the front
       And: The returned value has the expected value
-------------------------------------------------------------------------------
remove.cpp:5
...............................................................................

remove.cpp:51: 
PASSED:
  REQUIRE( ret_val == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: List item replacement
     Given: An integer list that has been grown and shrunk acutely
      When: An item is replaced
      Then: The replaced item, returned from replace(), has the expected value
-------------------------------------------------------------------------------
replace.cpp:5
...............................................................................

replace.cpp:24: 
PASSED:
  REQUIRE( old_item == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: List item replacement
     Given: An integer list that has been grown and shrunk acutely
      When: An item is replaced
       And: The new item is now stored in the list at the replacement position
-------------------------------------------------------------------------------
replace.cpp:5
...............................................................................

replace.cpp:27: 
PASSED:
  REQUIRE( l[42] == 5 )
with expansion:
  5 == 5

-------------------------------------------------------------------------------
Scenario: List item replacement
     Given: An integer list that has been grown and shrunk acutely
      When: An item is replaced
       And: The list size did not change
-------------------------------------------------------------------------------
replace.cpp:5
...............................................................................

replace.cpp:30: 
PASSED:
  REQUIRE( l.size() == old_size )
with expansion:
  100 == 100

-------------------------------------------------------------------------------
Scenario: List item replacement
     Given: An integer list that has been grown and shrunk acutely
      When: An out of bounds position is passed to replace()
      Then: The list throws an out-of-range error
-------------------------------------------------------------------------------
replace.cpp:5
...............................................................................

replace.cpp:36: 
PASSED:
  REQUIRE_THROWS_AS( l.replace(7, l.size()) )

replace.cpp:37: 
PASSED:
  REQUIRE_THROWS_AS( l.replace(7, 5000) )

===============================================================================
All tests passed (186 assertions in 7 test cases)

