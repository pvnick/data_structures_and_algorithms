
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
run_tests is a Catch v1.0 b11 host application.
Run with -? for options

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
      When: The tree is filled to half-capacity
      Then: The load() method reports 50% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:27: 
PASSED:
  REQUIRE( map.load() == 0.5 )
with expansion:
  0.5 == 0.5

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
      When: The tree is filled to half-capacity
       And: The BST tree structure is maintained
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:37: 
PASSED:
  REQUIRE( unsorted_keys == sorted_keys )
with expansion:
  "499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481
  ,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462
  ,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443
  ,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424
  ,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405
  ,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386
  ,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367
  ,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348
  ,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329
  ,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310
  ,309,308,307,306,305,304,303,302,301,300,299,298,297,296,295,294,293,292,291
  ,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272
  ,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,253
  ,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234
  ,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215
  ,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196
  ,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177
  ,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158
  ,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139
  ,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120
  ,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101
  ,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76
  ,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51
  ,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26
  ,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,"
  ==
  "499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481
  ,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462
  ,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443
  ,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424
  ,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405
  ,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386
  ,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367
  ,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348
  ,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329
  ,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310
  ,309,308,307,306,305,304,303,302,301,300,299,298,297,296,295,294,293,292,291
  ,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272
  ,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,253
  ,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234
  ,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215
  ,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196
  ,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177
  ,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158
  ,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139
  ,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120
  ,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101
  ,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76
  ,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51
  ,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26
  ,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,"

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
      Then: The load() method reports 100% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:44: 
PASSED:
  REQUIRE( map.load() == 1 )
with expansion:
  1.0 == 1

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
  And when: Half the items are randomly deleted
      Then: The load() method reports 50% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:56: 
PASSED:
  REQUIRE( map.load() == 0.5 )
with expansion:
  0.5 == 0.5

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:17: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:18: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:19: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with integer keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
  And when: Half the items are randomly deleted
       And: The BST tree structure is maintained
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:66: 
PASSED:
  REQUIRE( unsorted_keys == sorted_keys )
with expansion:
  "999,994,993,990,989,988,987,981,980,978,977,976,975,973,972,971,969,968,966
  ,965,964,963,962,961,960,959,958,957,956,955,953,949,947,945,944,943,939,937
  ,935,933,932,929,928,923,921,919,918,917,915,914,912,909,908,907,905,903,902
  ,901,900,898,897,894,893,892,890,889,887,886,885,883,882,876,873,872,871,870
  ,869,868,865,862,861,860,859,858,857,856,855,853,852,851,850,847,846,845,844
  ,843,842,841,840,839,838,835,834,833,831,830,829,828,827,826,825,824,822,821
  ,820,819,818,816,815,814,813,811,810,809,808,806,805,804,803,802,801,800,798
  ,797,796,795,794,792,790,789,788,787,786,785,784,783,782,781,780,779,778,777
  ,772,770,767,766,765,764,763,762,759,758,757,755,754,752,751,749,748,747,746
  ,745,744,742,741,740,739,738,734,733,732,731,729,728,727,726,724,723,722,720
  ,719,716,715,714,713,712,711,709,708,706,705,702,699,697,696,693,692,691,689
  ,685,683,681,680,678,676,672,671,670,669,668,667,666,661,660,659,658,657,656
  ,655,653,652,651,649,648,647,646,645,644,643,641,640,638,637,636,635,634,632
  ,630,628,627,622,621,620,618,617,616,615,614,612,610,609,608,607,604,603,602
  ,600,599,598,596,593,592,591,589,587,584,583,582,581,579,577,576,574,573,572
  ,570,569,568,567,564,562,561,560,559,555,553,549,548,547,546,545,544,543,542
  ,540,538,537,536,535,533,530,529,528,527,523,522,521,519,518,516,515,514,510
  ,508,506,505,504,499,498,497,495,493,492,491,490,489,487,484,482,481,476,475
  ,474,473,470,469,468,467,466,465,464,463,461,460,459,458,456,454,453,452,451
  ,448,446,445,444,442,441,437,436,434,431,430,424,423,421,420,418,417,415,414
  ,413,411,410,409,406,405,404,403,400,398,397,396,395,393,392,391,390,389,388
  ,386,385,383,382,380,379,377,376,374,370,367,366,365,364,363,362,360,359,358
  ,357,356,354,353,351,350,349,346,345,344,341,340,339,338,337,336,335,334,333
  ,331,330,329,328,326,325,324,323,322,320,319,318,317,316,315,314,313,312,309
  ,306,305,304,303,302,300,298,297,295,294,293,292,290,288,287,286,285,284,283
  ,282,281,280,279,277,276,274,273,272,271,270,269,268,267,266,265,264,263,262
  ,260,259,258,256,253,251,"
  ==
  "999,994,993,990,989,988,987,981,980,978,977,976,975,973,972,971,969,968,966
  ,965,964,963,962,961,960,959,958,957,956,955,953,949,947,945,944,943,939,937
  ,935,933,932,929,928,923,921,919,918,917,915,914,912,909,908,907,905,903,902
  ,901,900,898,897,894,893,892,890,889,887,886,885,883,882,876,873,872,871,870
  ,869,868,865,862,861,860,859,858,857,856,855,853,852,851,850,847,846,845,844
  ,843,842,841,840,839,838,835,834,833,831,830,829,828,827,826,825,824,822,821
  ,820,819,818,816,815,814,813,811,810,809,808,806,805,804,803,802,801,800,798
  ,797,796,795,794,792,790,789,788,787,786,785,784,783,782,781,780,779,778,777
  ,772,770,767,766,765,764,763,762,759,758,757,755,754,752,751,749,748,747,746
  ,745,744,742,741,740,739,738,734,733,732,731,729,728,727,726,724,723,722,720
  ,719,716,715,714,713,712,711,709,708,706,705,702,699,697,696,693,692,691,689
  ,685,683,681,680,678,676,672,671,670,669,668,667,666,661,660,659,658,657,656
  ,655,653,652,651,649,648,647,646,645,644,643,641,640,638,637,636,635,634,632
  ,630,628,627,622,621,620,618,617,616,615,614,612,610,609,608,607,604,603,602
  ,600,599,598,596,593,592,591,589,587,584,583,582,581,579,577,576,574,573,572
  ,570,569,568,567,564,562,561,560,559,555,553,549,548,547,546,545,544,543,542
  ,540,538,537,536,535,533,530,529,528,527,523,522,521,519,518,516,515,514,510
  ,508,506,505,504,499,498,497,495,493,492,491,490,489,487,484,482,481,476,475
  ,474,473,470,469,468,467,466,465,464,463,461,460,459,458,456,454,453,452,451
  ,448,446,445,444,442,441,437,436,434,431,430,424,423,421,420,418,417,415,414
  ,413,411,410,409,406,405,404,403,400,398,397,396,395,393,392,391,390,389,388
  ,386,385,383,382,380,379,377,376,374,370,367,366,365,364,363,362,360,359,358
  ,357,356,354,353,351,350,349,346,345,344,341,340,339,338,337,336,335,334,333
  ,331,330,329,328,326,325,324,323,322,320,319,318,317,316,315,314,313,312,309
  ,306,305,304,303,302,300,298,297,295,294,293,292,290,288,287,286,285,284,283
  ,282,281,280,279,277,276,274,273,272,271,270,269,268,267,266,265,264,263,262
  ,260,259,258,256,253,251,"

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
      When: The tree is filled to half-capacity
      Then: The load() method reports 50% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:86: 
PASSED:
  REQUIRE( map.load() == 0.5 )
with expansion:
  0.5 == 0.5

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
      When: The tree is filled to half-capacity
       And: The BST tree structure is maintained
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:96: 
PASSED:
  REQUIRE( tree_order_keys == sorted_keys )
with expansion:
  "249.5,249,248.5,248,247.5,247,246.5,246,245.5,245,244.5,244,243.5,243,242.5
  ,242,241.5,241,240.5,240,239.5,239,238.5,238,237.5,237,236.5,236,235.5,235
  ,234.5,234,233.5,233,232.5,232,231.5,231,230.5,230,229.5,229,228.5,228,227.5
  ,227,226.5,226,225.5,225,224.5,224,223.5,223,222.5,222,221.5,221,220.5,220
  ,219.5,219,218.5,218,217.5,217,216.5,216,215.5,215,214.5,214,213.5,213,212.5
  ,212,211.5,211,210.5,210,209.5,209,208.5,208,207.5,207,206.5,206,205.5,205
  ,204.5,204,203.5,203,202.5,202,201.5,201,200.5,200,199.5,199,198.5,198,197.5
  ,197,196.5,196,195.5,195,194.5,194,193.5,193,192.5,192,191.5,191,190.5,190
  ,189.5,189,188.5,188,187.5,187,186.5,186,185.5,185,184.5,184,183.5,183,182.5
  ,182,181.5,181,180.5,180,179.5,179,178.5,178,177.5,177,176.5,176,175.5,175
  ,174.5,174,173.5,173,172.5,172,171.5,171,170.5,170,169.5,169,168.5,168,167.5
  ,167,166.5,166,165.5,165,164.5,164,163.5,163,162.5,162,161.5,161,160.5,160
  ,159.5,159,158.5,158,157.5,157,156.5,156,155.5,155,154.5,154,153.5,153,152.5
  ,152,151.5,151,150.5,150,149.5,149,148.5,148,147.5,147,146.5,146,145.5,145
  ,144.5,144,143.5,143,142.5,142,141.5,141,140.5,140,139.5,139,138.5,138,137.5
  ,137,136.5,136,135.5,135,134.5,134,133.5,133,132.5,132,131.5,131,130.5,130
  ,129.5,129,128.5,128,127.5,127,126.5,126,125.5,125,124.5,124,123.5,123,122.5
  ,122,121.5,121,120.5,120,119.5,119,118.5,118,117.5,117,116.5,116,115.5,115
  ,114.5,114,113.5,113,112.5,112,111.5,111,110.5,110,109.5,109,108.5,108,107.5
  ,107,106.5,106,105.5,105,104.5,104,103.5,103,102.5,102,101.5,101,100.5,100,99
  .5,99,98.5,98,97.5,97,96.5,96,95.5,95,94.5,94,93.5,93,92.5,92,91.5,91,90.5,90
  ,89.5,89,88.5,88,87.5,87,86.5,86,85.5,85,84.5,84,83.5,83,82.5,82,81.5,81,80.5
  ,80,79.5,79,78.5,78,77.5,77,76.5,76,75.5,75,74.5,74,73.5,73,72.5,72,71.5,71
  ,70.5,70,69.5,69,68.5,68,67.5,67,66.5,66,65.5,65,64.5,64,63.5,63,62.5,62,61.5
  ,61,60.5,60,59.5,59,58.5,58,57.5,57,56.5,56,55.5,55,54.5,54,53.5,53,52.5,52
  ,51.5,51,50.5,50,49.5,49,48.5,48,47.5,47,46.5,46,45.5,45,44.5,44,43.5,43,42.5
  ,42,41.5,41,40.5,40,39.5,39,38.5,38,37.5,37,36.5,36,35.5,35,34.5,34,33.5,33
  ,32.5,32,31.5,31,30.5,30,29.5,29,28.5,28,27.5,27,26.5,26,25.5,25,24.5,24,23.5
  ,23,22.5,22,21.5,21,20.5,20,19.5,19,18.5,18,17.5,17,16.5,16,15.5,15,14.5,14
  ,13.5,13,12.5,12,11.5,11,10.5,10,9.5,9,8.5,8,7.5,7,6.5,6,5.5,5,4.5,4,3.5,3,2
  .5,2,1.5,1,0.5,0,"
  ==
  "249.5,249,248.5,248,247.5,247,246.5,246,245.5,245,244.5,244,243.5,243,242.5
  ,242,241.5,241,240.5,240,239.5,239,238.5,238,237.5,237,236.5,236,235.5,235
  ,234.5,234,233.5,233,232.5,232,231.5,231,230.5,230,229.5,229,228.5,228,227.5
  ,227,226.5,226,225.5,225,224.5,224,223.5,223,222.5,222,221.5,221,220.5,220
  ,219.5,219,218.5,218,217.5,217,216.5,216,215.5,215,214.5,214,213.5,213,212.5
  ,212,211.5,211,210.5,210,209.5,209,208.5,208,207.5,207,206.5,206,205.5,205
  ,204.5,204,203.5,203,202.5,202,201.5,201,200.5,200,199.5,199,198.5,198,197.5
  ,197,196.5,196,195.5,195,194.5,194,193.5,193,192.5,192,191.5,191,190.5,190
  ,189.5,189,188.5,188,187.5,187,186.5,186,185.5,185,184.5,184,183.5,183,182.5
  ,182,181.5,181,180.5,180,179.5,179,178.5,178,177.5,177,176.5,176,175.5,175
  ,174.5,174,173.5,173,172.5,172,171.5,171,170.5,170,169.5,169,168.5,168,167.5
  ,167,166.5,166,165.5,165,164.5,164,163.5,163,162.5,162,161.5,161,160.5,160
  ,159.5,159,158.5,158,157.5,157,156.5,156,155.5,155,154.5,154,153.5,153,152.5
  ,152,151.5,151,150.5,150,149.5,149,148.5,148,147.5,147,146.5,146,145.5,145
  ,144.5,144,143.5,143,142.5,142,141.5,141,140.5,140,139.5,139,138.5,138,137.5
  ,137,136.5,136,135.5,135,134.5,134,133.5,133,132.5,132,131.5,131,130.5,130
  ,129.5,129,128.5,128,127.5,127,126.5,126,125.5,125,124.5,124,123.5,123,122.5
  ,122,121.5,121,120.5,120,119.5,119,118.5,118,117.5,117,116.5,116,115.5,115
  ,114.5,114,113.5,113,112.5,112,111.5,111,110.5,110,109.5,109,108.5,108,107.5
  ,107,106.5,106,105.5,105,104.5,104,103.5,103,102.5,102,101.5,101,100.5,100,99
  .5,99,98.5,98,97.5,97,96.5,96,95.5,95,94.5,94,93.5,93,92.5,92,91.5,91,90.5,90
  ,89.5,89,88.5,88,87.5,87,86.5,86,85.5,85,84.5,84,83.5,83,82.5,82,81.5,81,80.5
  ,80,79.5,79,78.5,78,77.5,77,76.5,76,75.5,75,74.5,74,73.5,73,72.5,72,71.5,71
  ,70.5,70,69.5,69,68.5,68,67.5,67,66.5,66,65.5,65,64.5,64,63.5,63,62.5,62,61.5
  ,61,60.5,60,59.5,59,58.5,58,57.5,57,56.5,56,55.5,55,54.5,54,53.5,53,52.5,52
  ,51.5,51,50.5,50,49.5,49,48.5,48,47.5,47,46.5,46,45.5,45,44.5,44,43.5,43,42.5
  ,42,41.5,41,40.5,40,39.5,39,38.5,38,37.5,37,36.5,36,35.5,35,34.5,34,33.5,33
  ,32.5,32,31.5,31,30.5,30,29.5,29,28.5,28,27.5,27,26.5,26,25.5,25,24.5,24,23.5
  ,23,22.5,22,21.5,21,20.5,20,19.5,19,18.5,18,17.5,17,16.5,16,15.5,15,14.5,14
  ,13.5,13,12.5,12,11.5,11,10.5,10,9.5,9,8.5,8,7.5,7,6.5,6,5.5,5,4.5,4,3.5,3,2
  .5,2,1.5,1,0.5,0,"

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
      Then: The load() method reports 100% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:103: 
PASSED:
  REQUIRE( map.load() == 1 )
with expansion:
  1.0 == 1

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
  And when: Half the items are randomly deleted
      Then: The load() method reports 50% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:115: 
PASSED:
  REQUIRE( map.load() == 0.5 )
with expansion:
  0.5 == 0.5

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:76: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:77: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:78: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with double keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
  And when: Half the items are randomly deleted
       And: The BST tree structure is maintained
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:125: 
PASSED:
  REQUIRE( tree_order_keys == sorted_keys )
with expansion:
  "499.5,499,498.5,497.5,496,495,494.5,494,493.5,493,492.5,492,491.5,491,490.5
  ,490,489,488,487.5,487,486.5,486,485.5,485,484.5,484,482.5,482,481.5,480.5
  ,479,478.5,478,477.5,477,476,475.5,475,474.5,474,473.5,472,471.5,471,470.5
  ,469.5,469,468,467.5,467,466.5,466,465.5,465,464.5,464,463,461,460.5,460,459
  ,458.5,458,457.5,456.5,456,455.5,454.5,454,453.5,453,452.5,452,450.5,450,449
  ,447.5,447,446,445.5,445,444.5,443.5,443,442.5,442,441,440,439,438.5,438,436
  .5,435,434,433,432.5,432,431.5,431,430.5,430,429,428.5,428,427,426,425.5,425
  ,424.5,423,421.5,421,420.5,419.5,418.5,418,417,415.5,414.5,413.5,413,412.5
  ,411.5,411,410,409,408.5,406.5,405,404.5,404,403,402.5,402,401,400,399.5,399
  ,398,397.5,396.5,396,394.5,394,393,392.5,392,391,390.5,390,389,388.5,387.5
  ,386.5,385.5,384.5,384,383.5,383,382.5,382,381.5,380.5,380,379.5,379,378.5
  ,377.5,377,376.5,376,374,373.5,373,372,371,370.5,370,369,368.5,367.5,367,366
  .5,365.5,365,364,363.5,363,362.5,361,360.5,359.5,358.5,358,357.5,357,356,355
  ,354,353.5,353,352,351,350.5,350,349,347.5,346,345.5,345,344,343,342.5,341.5
  ,340,339,337.5,337,336,335.5,335,334.5,333,332.5,331.5,331,330.5,330,329.5
  ,329,328,327.5,327,326.5,325.5,324.5,324,323.5,322.5,320.5,319,318.5,318,317
  ,316.5,316,315.5,314.5,314,313.5,312.5,312,310.5,310,309.5,309,308.5,308,307
  .5,307,306.5,306,305.5,305,304.5,303,302.5,301.5,300.5,300,298.5,298,297,295
  .5,295,294.5,293.5,292,291.5,290.5,290,289.5,289,287,286.5,286,285,284,283.5
  ,283,282.5,282,280,279,278,277,275,274,273.5,273,272.5,271.5,270,269,268.5
  ,268,267.5,266.5,266,265.5,265,264.5,264,263,262,261,260.5,260,259.5,259,258
  ,257,256.5,256,255,254,253.5,252.5,252,251.5,250,249.5,249,247.5,246.5,245.5
  ,245,244,243,242.5,241.5,241,240,239.5,239,238.5,238,237.5,237,236.5,236,235
  ,234.5,233.5,232,231.5,230,229.5,229,228.5,228,227,226,225,224,223.5,222.5
  ,221.5,221,220.5,220,219,218.5,218,217.5,217,215,214.5,214,213.5,213,212.5
  ,212,211.5,211,210.5,210,209.5,208.5,208,207.5,206,205.5,205,204,203.5,203
  ,202.5,200.5,200,199.5,198,197.5,196.5,196,195,194,193.5,193,192.5,191.5,191
  ,190,189.5,188.5,188,187,186.5,186,185,184.5,184,183.5,183,182.5,182,181.5
  ,181,180.5,179.5,179,178,177.5,176.5,175.5,175,174.5,174,173.5,172.5,172,170
  .5,170,169.5,168,167.5,167,165.5,164.5,164,163,162.5,162,161.5,161,160.5,160
  ,159,158.5,158,157,156.5,156,154.5,154,153,152.5,152,150.5,150,149.5,149,148
  .5,147.5,147,146.5,145.5,145,144.5,144,142.5,140.5,140,139,138.5,138,137.5
  ,137,136.5,135.5,135,133.5,132,131.5,131,130.5,129.5,129,127.5,126,"
  ==
  "499.5,499,498.5,497.5,496,495,494.5,494,493.5,493,492.5,492,491.5,491,490.5
  ,490,489,488,487.5,487,486.5,486,485.5,485,484.5,484,482.5,482,481.5,480.5
  ,479,478.5,478,477.5,477,476,475.5,475,474.5,474,473.5,472,471.5,471,470.5
  ,469.5,469,468,467.5,467,466.5,466,465.5,465,464.5,464,463,461,460.5,460,459
  ,458.5,458,457.5,456.5,456,455.5,454.5,454,453.5,453,452.5,452,450.5,450,449
  ,447.5,447,446,445.5,445,444.5,443.5,443,442.5,442,441,440,439,438.5,438,436
  .5,435,434,433,432.5,432,431.5,431,430.5,430,429,428.5,428,427,426,425.5,425
  ,424.5,423,421.5,421,420.5,419.5,418.5,418,417,415.5,414.5,413.5,413,412.5
  ,411.5,411,410,409,408.5,406.5,405,404.5,404,403,402.5,402,401,400,399.5,399
  ,398,397.5,396.5,396,394.5,394,393,392.5,392,391,390.5,390,389,388.5,387.5
  ,386.5,385.5,384.5,384,383.5,383,382.5,382,381.5,380.5,380,379.5,379,378.5
  ,377.5,377,376.5,376,374,373.5,373,372,371,370.5,370,369,368.5,367.5,367,366
  .5,365.5,365,364,363.5,363,362.5,361,360.5,359.5,358.5,358,357.5,357,356,355
  ,354,353.5,353,352,351,350.5,350,349,347.5,346,345.5,345,344,343,342.5,341.5
  ,340,339,337.5,337,336,335.5,335,334.5,333,332.5,331.5,331,330.5,330,329.5
  ,329,328,327.5,327,326.5,325.5,324.5,324,323.5,322.5,320.5,319,318.5,318,317
  ,316.5,316,315.5,314.5,314,313.5,312.5,312,310.5,310,309.5,309,308.5,308,307
  .5,307,306.5,306,305.5,305,304.5,303,302.5,301.5,300.5,300,298.5,298,297,295
  .5,295,294.5,293.5,292,291.5,290.5,290,289.5,289,287,286.5,286,285,284,283.5
  ,283,282.5,282,280,279,278,277,275,274,273.5,273,272.5,271.5,270,269,268.5
  ,268,267.5,266.5,266,265.5,265,264.5,264,263,262,261,260.5,260,259.5,259,258
  ,257,256.5,256,255,254,253.5,252.5,252,251.5,250,249.5,249,247.5,246.5,245.5
  ,245,244,243,242.5,241.5,241,240,239.5,239,238.5,238,237.5,237,236.5,236,235
  ,234.5,233.5,232,231.5,230,229.5,229,228.5,228,227,226,225,224,223.5,222.5
  ,221.5,221,220.5,220,219,218.5,218,217.5,217,215,214.5,214,213.5,213,212.5
  ,212,211.5,211,210.5,210,209.5,208.5,208,207.5,206,205.5,205,204,203.5,203
  ,202.5,200.5,200,199.5,198,197.5,196.5,196,195,194,193.5,193,192.5,191.5,191
  ,190,189.5,188.5,188,187,186.5,186,185,184.5,184,183.5,183,182.5,182,181.5
  ,181,180.5,179.5,179,178,177.5,176.5,175.5,175,174.5,174,173.5,172.5,172,170
  .5,170,169.5,168,167.5,167,165.5,164.5,164,163,162.5,162,161.5,161,160.5,160
  ,159,158.5,158,157,156.5,156,154.5,154,153,152.5,152,150.5,150,149.5,149,148
  .5,147.5,147,146.5,145.5,145,144.5,144,142.5,140.5,140,139,138.5,138,137.5
  ,137,136.5,135.5,135,133.5,132,131.5,131,130.5,129.5,129,127.5,126,"

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
      When: The tree is filled to half-capacity
      Then: The load() method reports 50% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:148: 
PASSED:
  REQUIRE( map.load() == 0.5 )
with expansion:
  0.5 == 0.5

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
      When: The tree is filled to half-capacity
       And: The BST tree structure is maintained
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:158: 
PASSED:
  REQUIRE( tree_order_keys == sorted_keys )
with expansion:
  "99,98,97,96,95,94,93,92,91,90,9,89,88,87,86,85,84,83,82,81,80,8,79,78,77,76
  ,75,74,73,72,71,70,7,69,68,67,66,65,64,63,62,61,60,6,59,58,57,56,55,54,53,52
  ,51,50,5,499,498,497,496,495,494,493,492,491,490,49,489,488,487,486,485,484
  ,483,482,481,480,48,479,478,477,476,475,474,473,472,471,470,47,469,468,467
  ,466,465,464,463,462,461,460,46,459,458,457,456,455,454,453,452,451,450,45
  ,449,448,447,446,445,444,443,442,441,440,44,439,438,437,436,435,434,433,432
  ,431,430,43,429,428,427,426,425,424,423,422,421,420,42,419,418,417,416,415
  ,414,413,412,411,410,41,409,408,407,406,405,404,403,402,401,400,40,4,399,398
  ,397,396,395,394,393,392,391,390,39,389,388,387,386,385,384,383,382,381,380
  ,38,379,378,377,376,375,374,373,372,371,370,37,369,368,367,366,365,364,363
  ,362,361,360,36,359,358,357,356,355,354,353,352,351,350,35,349,348,347,346
  ,345,344,343,342,341,340,34,339,338,337,336,335,334,333,332,331,330,33,329
  ,328,327,326,325,324,323,322,321,320,32,319,318,317,316,315,314,313,312,311
  ,310,31,309,308,307,306,305,304,303,302,301,300,30,3,299,298,297,296,295,294
  ,293,292,291,290,29,289,288,287,286,285,284,283,282,281,280,28,279,278,277
  ,276,275,274,273,272,271,270,27,269,268,267,266,265,264,263,262,261,260,26
  ,259,258,257,256,255,254,253,252,251,250,25,249,248,247,246,245,244,243,242
  ,241,240,24,239,238,237,236,235,234,233,232,231,230,23,229,228,227,226,225
  ,224,223,222,221,220,22,219,218,217,216,215,214,213,212,211,210,21,209,208
  ,207,206,205,204,203,202,201,200,20,2,199,198,197,196,195,194,193,192,191,190
  ,19,189,188,187,186,185,184,183,182,181,180,18,179,178,177,176,175,174,173
  ,172,171,170,17,169,168,167,166,165,164,163,162,161,160,16,159,158,157,156
  ,155,154,153,152,151,150,15,149,148,147,146,145,144,143,142,141,140,14,139
  ,138,137,136,135,134,133,132,131,130,13,129,128,127,126,125,124,123,122,121
  ,120,12,119,118,117,116,115,114,113,112,111,110,11,109,108,107,106,105,104
  ,103,102,101,100,10,1,0,"
  ==
  "99,98,97,96,95,94,93,92,91,90,9,89,88,87,86,85,84,83,82,81,80,8,79,78,77,76
  ,75,74,73,72,71,70,7,69,68,67,66,65,64,63,62,61,60,6,59,58,57,56,55,54,53,52
  ,51,50,5,499,498,497,496,495,494,493,492,491,490,49,489,488,487,486,485,484
  ,483,482,481,480,48,479,478,477,476,475,474,473,472,471,470,47,469,468,467
  ,466,465,464,463,462,461,460,46,459,458,457,456,455,454,453,452,451,450,45
  ,449,448,447,446,445,444,443,442,441,440,44,439,438,437,436,435,434,433,432
  ,431,430,43,429,428,427,426,425,424,423,422,421,420,42,419,418,417,416,415
  ,414,413,412,411,410,41,409,408,407,406,405,404,403,402,401,400,40,4,399,398
  ,397,396,395,394,393,392,391,390,39,389,388,387,386,385,384,383,382,381,380
  ,38,379,378,377,376,375,374,373,372,371,370,37,369,368,367,366,365,364,363
  ,362,361,360,36,359,358,357,356,355,354,353,352,351,350,35,349,348,347,346
  ,345,344,343,342,341,340,34,339,338,337,336,335,334,333,332,331,330,33,329
  ,328,327,326,325,324,323,322,321,320,32,319,318,317,316,315,314,313,312,311
  ,310,31,309,308,307,306,305,304,303,302,301,300,30,3,299,298,297,296,295,294
  ,293,292,291,290,29,289,288,287,286,285,284,283,282,281,280,28,279,278,277
  ,276,275,274,273,272,271,270,27,269,268,267,266,265,264,263,262,261,260,26
  ,259,258,257,256,255,254,253,252,251,250,25,249,248,247,246,245,244,243,242
  ,241,240,24,239,238,237,236,235,234,233,232,231,230,23,229,228,227,226,225
  ,224,223,222,221,220,22,219,218,217,216,215,214,213,212,211,210,21,209,208
  ,207,206,205,204,203,202,201,200,20,2,199,198,197,196,195,194,193,192,191,190
  ,19,189,188,187,186,185,184,183,182,181,180,18,179,178,177,176,175,174,173
  ,172,171,170,17,169,168,167,166,165,164,163,162,161,160,16,159,158,157,156
  ,155,154,153,152,151,150,15,149,148,147,146,145,144,143,142,141,140,14,139
  ,138,137,136,135,134,133,132,131,130,13,129,128,127,126,125,124,123,122,121
  ,120,12,119,118,117,116,115,114,113,112,111,110,11,109,108,107,106,105,104
  ,103,102,101,100,10,1,0,"

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
      Then: The load() method reports 100% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:165: 
PASSED:
  REQUIRE( map.load() == 1 )
with expansion:
  1.0 == 1

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
  And when: Half the items are randomly deleted
      Then: The load() method reports 50% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:177: 
PASSED:
  REQUIRE( map.load() == 0.5 )
with expansion:
  0.5 == 0.5

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:138: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:139: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:140: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with string keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
  And when: Half the items are randomly deleted
       And: The BST tree structure is maintained
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:187: 
PASSED:
  REQUIRE( tree_order_keys == sorted_keys )
with expansion:
  "999,998,997,995,994,992,991,988,987,986,985,984,983,982,980,978,977,976,972
  ,971,970,968,967,966,965,963,958,957,956,955,954,952,951,949,945,944,943,941
  ,940,938,934,933,931,929,927,926,924,923,922,921,920,919,918,916,911,910,907
  ,906,905,904,902,901,900,897,895,894,893,891,890,889,888,887,886,885,884,882
  ,880,878,874,873,871,870,868,867,864,863,862,861,860,859,858,857,856,855,854
  ,852,850,849,848,847,846,845,842,841,840,839,837,835,834,832,831,830,829,828
  ,826,824,823,822,821,820,819,817,816,815,813,812,810,809,807,806,805,801,800
  ,798,797,796,791,790,789,788,787,784,782,780,778,777,775,774,773,772,769,768
  ,767,766,765,763,760,759,758,757,755,754,752,751,748,747,746,745,743,742,741
  ,740,739,738,736,735,732,731,730,729,727,726,723,722,721,720,718,716,715,713
  ,711,710,709,708,707,706,705,703,702,701,697,695,694,693,690,687,685,684,683
  ,682,681,679,677,676,674,672,671,667,663,662,660,659,658,657,656,653,652,651
  ,650,649,647,646,641,639,638,637,636,635,634,633,632,631,630,629,628,626,625
  ,624,623,620,618,617,615,614,613,612,611,609,608,607,606,605,603,602,601,600
  ,598,597,596,595,594,593,592,591,590,587,586,585,583,582,581,579,578,577,575
  ,574,572,570,569,567,563,562,560,559,558,557,556,555,553,552,551,550,549,548
  ,547,546,544,543,541,537,536,534,533,532,531,528,526,525,524,523,520,519,516
  ,515,514,512,509,508,503,502,501,499,498,497,496,494,493,492,491,488,486,485
  ,484,483,482,479,475,473,467,466,465,464,463,462,461,460,459,458,457,456,455
  ,454,453,452,449,448,447,446,444,443,440,437,436,434,433,430,429,428,427,425
  ,424,423,420,419,418,417,415,414,413,411,409,406,405,400,399,398,397,396,393
  ,392,391,387,386,384,383,382,381,379,378,377,376,374,373,368,367,366,365,364
  ,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345
  ,343,342,338,337,336,335,334,333,332,331,330,328,327,325,322,320,319,317,315
  ,311,310,309,308,307,306,305,304,303,301,300,298,297,296,295,294,291,290,289
  ,288,287,286,285,283,281,279,278,275,274,273,271,270,268,267,266,265,263,262
  ,261,258,256,255,252,251,"
  ==
  "999,998,997,995,994,992,991,988,987,986,985,984,983,982,980,978,977,976,972
  ,971,970,968,967,966,965,963,958,957,956,955,954,952,951,949,945,944,943,941
  ,940,938,934,933,931,929,927,926,924,923,922,921,920,919,918,916,911,910,907
  ,906,905,904,902,901,900,897,895,894,893,891,890,889,888,887,886,885,884,882
  ,880,878,874,873,871,870,868,867,864,863,862,861,860,859,858,857,856,855,854
  ,852,850,849,848,847,846,845,842,841,840,839,837,835,834,832,831,830,829,828
  ,826,824,823,822,821,820,819,817,816,815,813,812,810,809,807,806,805,801,800
  ,798,797,796,791,790,789,788,787,784,782,780,778,777,775,774,773,772,769,768
  ,767,766,765,763,760,759,758,757,755,754,752,751,748,747,746,745,743,742,741
  ,740,739,738,736,735,732,731,730,729,727,726,723,722,721,720,718,716,715,713
  ,711,710,709,708,707,706,705,703,702,701,697,695,694,693,690,687,685,684,683
  ,682,681,679,677,676,674,672,671,667,663,662,660,659,658,657,656,653,652,651
  ,650,649,647,646,641,639,638,637,636,635,634,633,632,631,630,629,628,626,625
  ,624,623,620,618,617,615,614,613,612,611,609,608,607,606,605,603,602,601,600
  ,598,597,596,595,594,593,592,591,590,587,586,585,583,582,581,579,578,577,575
  ,574,572,570,569,567,563,562,560,559,558,557,556,555,553,552,551,550,549,548
  ,547,546,544,543,541,537,536,534,533,532,531,528,526,525,524,523,520,519,516
  ,515,514,512,509,508,503,502,501,499,498,497,496,494,493,492,491,488,486,485
  ,484,483,482,479,475,473,467,466,465,464,463,462,461,460,459,458,457,456,455
  ,454,453,452,449,448,447,446,444,443,440,437,436,434,433,430,429,428,427,425
  ,424,423,420,419,418,417,415,414,413,411,409,406,405,400,399,398,397,396,393
  ,392,391,387,386,384,383,382,381,379,378,377,376,374,373,368,367,366,365,364
  ,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345
  ,343,342,338,337,336,335,334,333,332,331,330,328,327,325,322,320,319,317,315
  ,311,310,309,308,307,306,305,304,303,301,300,298,297,296,295,294,291,290,289
  ,288,287,286,285,283,281,279,278,275,274,273,271,270,268,267,266,265,263,262
  ,261,258,256,255,252,251,"

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
      When: The tree is filled to half-capacity
      Then: The load() method reports 50% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:207: 
PASSED:
  REQUIRE( map.load() == 0.5 )
with expansion:
  0.5 == 0.5

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
      When: The tree is filled to half-capacity
       And: The BST tree structure is maintained
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:217: 
PASSED:
  REQUIRE( tree_order_keys == sorted_keys )
with expansion:
  "99,98,97,96,95,94,93,92,91,90,9,89,88,87,86,85,84,83,82,81,80,8,79,78,77,76
  ,75,74,73,72,71,70,7,69,68,67,66,65,64,63,62,61,60,6,59,58,57,56,55,54,53,52
  ,51,50,5,499,498,497,496,495,494,493,492,491,490,49,489,488,487,486,485,484
  ,483,482,481,480,48,479,478,477,476,475,474,473,472,471,470,47,469,468,467
  ,466,465,464,463,462,461,460,46,459,458,457,456,455,454,453,452,451,450,45
  ,449,448,447,446,445,444,443,442,441,440,44,439,438,437,436,435,434,433,432
  ,431,430,43,429,428,427,426,425,424,423,422,421,420,42,419,418,417,416,415
  ,414,413,412,411,410,41,409,408,407,406,405,404,403,402,401,400,40,4,399,398
  ,397,396,395,394,393,392,391,390,39,389,388,387,386,385,384,383,382,381,380
  ,38,379,378,377,376,375,374,373,372,371,370,37,369,368,367,366,365,364,363
  ,362,361,360,36,359,358,357,356,355,354,353,352,351,350,35,349,348,347,346
  ,345,344,343,342,341,340,34,339,338,337,336,335,334,333,332,331,330,33,329
  ,328,327,326,325,324,323,322,321,320,32,319,318,317,316,315,314,313,312,311
  ,310,31,309,308,307,306,305,304,303,302,301,300,30,3,299,298,297,296,295,294
  ,293,292,291,290,29,289,288,287,286,285,284,283,282,281,280,28,279,278,277
  ,276,275,274,273,272,271,270,27,269,268,267,266,265,264,263,262,261,260,26
  ,259,258,257,256,255,254,253,252,251,250,25,249,248,247,246,245,244,243,242
  ,241,240,24,239,238,237,236,235,234,233,232,231,230,23,229,228,227,226,225
  ,224,223,222,221,220,22,219,218,217,216,215,214,213,212,211,210,21,209,208
  ,207,206,205,204,203,202,201,200,20,2,199,198,197,196,195,194,193,192,191,190
  ,19,189,188,187,186,185,184,183,182,181,180,18,179,178,177,176,175,174,173
  ,172,171,170,17,169,168,167,166,165,164,163,162,161,160,16,159,158,157,156
  ,155,154,153,152,151,150,15,149,148,147,146,145,144,143,142,141,140,14,139
  ,138,137,136,135,134,133,132,131,130,13,129,128,127,126,125,124,123,122,121
  ,120,12,119,118,117,116,115,114,113,112,111,110,11,109,108,107,106,105,104
  ,103,102,101,100,10,1,0,"
  ==
  "99,98,97,96,95,94,93,92,91,90,9,89,88,87,86,85,84,83,82,81,80,8,79,78,77,76
  ,75,74,73,72,71,70,7,69,68,67,66,65,64,63,62,61,60,6,59,58,57,56,55,54,53,52
  ,51,50,5,499,498,497,496,495,494,493,492,491,490,49,489,488,487,486,485,484
  ,483,482,481,480,48,479,478,477,476,475,474,473,472,471,470,47,469,468,467
  ,466,465,464,463,462,461,460,46,459,458,457,456,455,454,453,452,451,450,45
  ,449,448,447,446,445,444,443,442,441,440,44,439,438,437,436,435,434,433,432
  ,431,430,43,429,428,427,426,425,424,423,422,421,420,42,419,418,417,416,415
  ,414,413,412,411,410,41,409,408,407,406,405,404,403,402,401,400,40,4,399,398
  ,397,396,395,394,393,392,391,390,39,389,388,387,386,385,384,383,382,381,380
  ,38,379,378,377,376,375,374,373,372,371,370,37,369,368,367,366,365,364,363
  ,362,361,360,36,359,358,357,356,355,354,353,352,351,350,35,349,348,347,346
  ,345,344,343,342,341,340,34,339,338,337,336,335,334,333,332,331,330,33,329
  ,328,327,326,325,324,323,322,321,320,32,319,318,317,316,315,314,313,312,311
  ,310,31,309,308,307,306,305,304,303,302,301,300,30,3,299,298,297,296,295,294
  ,293,292,291,290,29,289,288,287,286,285,284,283,282,281,280,28,279,278,277
  ,276,275,274,273,272,271,270,27,269,268,267,266,265,264,263,262,261,260,26
  ,259,258,257,256,255,254,253,252,251,250,25,249,248,247,246,245,244,243,242
  ,241,240,24,239,238,237,236,235,234,233,232,231,230,23,229,228,227,226,225
  ,224,223,222,221,220,22,219,218,217,216,215,214,213,212,211,210,21,209,208
  ,207,206,205,204,203,202,201,200,20,2,199,198,197,196,195,194,193,192,191,190
  ,19,189,188,187,186,185,184,183,182,181,180,18,179,178,177,176,175,174,173
  ,172,171,170,17,169,168,167,166,165,164,163,162,161,160,16,159,158,157,156
  ,155,154,153,152,151,150,15,149,148,147,146,145,144,143,142,141,140,14,139
  ,138,137,136,135,134,133,132,131,130,13,129,128,127,126,125,124,123,122,121
  ,120,12,119,118,117,116,115,114,113,112,111,110,11,109,108,107,106,105,104
  ,103,102,101,100,10,1,0,"

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
      Then: The load() method reports 100% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:224: 
PASSED:
  REQUIRE( map.load() == 1 )
with expansion:
  1.0 == 1

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
  And when: Half the items are randomly deleted
      Then: The load() method reports 50% load factor
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:236: 
PASSED:
  REQUIRE( map.load() == 0.5 )
with expansion:
  0.5 == 0.5

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:197: 
PASSED:
  REQUIRE( map.is_empty() )
with expansion:
  true

tree_structure.cpp:198: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

tree_structure.cpp:199: 
PASSED:
  REQUIRE( map.load() == 0.0 )
with expansion:
  0.0 == 0.0

-------------------------------------------------------------------------------
Scenario: Valid BST tree structure is maintained
     Given: An RBST map with const char* keys
      When: The tree is filled to half-capacity
  And when: The tree is filled to full-capacity
  And when: Half the items are randomly deleted
       And: The BST tree structure is maintained
-------------------------------------------------------------------------------
tree_structure.cpp:10
...............................................................................

tree_structure.cpp:246: 
PASSED:
  REQUIRE( tree_order_keys == sorted_keys )
with expansion:
  "998,997,993,992,991,990,989,988,987,986,985,981,980,978,977,976,972,968,967
  ,964,962,961,960,959,958,956,955,954,952,951,950,949,948,947,942,941,940,938
  ,937,936,935,932,931,930,929,928,927,922,920,919,916,915,914,913,912,911,909
  ,908,907,906,905,904,902,901,899,898,897,896,895,893,891,890,889,888,887,886
  ,884,883,882,881,880,879,878,877,876,875,874,873,872,871,868,867,866,865,864
  ,863,862,860,859,857,855,854,853,852,850,849,847,845,843,841,840,839,836,835
  ,834,833,830,828,826,825,824,823,822,821,820,819,817,816,815,811,809,808,807
  ,806,801,800,798,797,796,793,791,790,789,787,785,784,782,781,778,775,774,773
  ,771,767,766,765,764,761,760,759,758,756,755,754,753,751,750,749,746,742,741
  ,740,736,735,734,733,732,728,727,723,721,720,719,718,716,714,713,711,710,709
  ,708,706,703,702,701,700,698,697,696,694,693,690,689,687,685,684,683,682,681
  ,679,678,677,676,675,674,673,672,671,670,667,664,663,661,659,658,657,655,653
  ,651,650,649,646,645,642,641,640,638,636,634,633,631,629,628,627,626,624,623
  ,622,619,618,615,614,613,612,611,610,609,607,606,605,604,603,599,598,596,595
  ,594,591,588,586,585,583,579,577,576,574,573,572,571,570,569,566,565,564,562
  ,561,560,559,555,554,553,552,549,548,547,545,544,542,541,540,539,537,536,535
  ,534,531,530,529,528,527,525,523,522,520,519,518,517,516,515,513,512,510,506
  ,505,503,501,500,499,496,495,494,493,492,491,488,485,484,481,480,479,477,476
  ,475,474,473,472,471,470,469,467,465,463,462,461,460,459,456,454,453,452,450
  ,449,448,446,445,444,443,442,441,437,436,435,434,432,431,429,426,424,423,421
  ,420,417,415,414,413,412,411,409,408,407,405,403,401,399,398,397,395,394,391
  ,389,388,387,386,385,383,381,380,379,378,377,376,375,374,373,372,370,369,368
  ,367,366,365,363,362,361,360,359,358,356,355,354,353,349,347,346,345,343,342
  ,341,340,339,335,334,333,332,331,330,329,328,327,326,325,323,322,321,320,319
  ,318,317,316,315,313,312,311,310,309,307,306,305,303,301,300,298,296,295,294
  ,292,291,290,289,284,281,280,279,277,274,273,268,267,266,265,264,263,262,260
  ,259,257,255,254,251,250,"
  ==
  "998,997,993,992,991,990,989,988,987,986,985,981,980,978,977,976,972,968,967
  ,964,962,961,960,959,958,956,955,954,952,951,950,949,948,947,942,941,940,938
  ,937,936,935,932,931,930,929,928,927,922,920,919,916,915,914,913,912,911,909
  ,908,907,906,905,904,902,901,899,898,897,896,895,893,891,890,889,888,887,886
  ,884,883,882,881,880,879,878,877,876,875,874,873,872,871,868,867,866,865,864
  ,863,862,860,859,857,855,854,853,852,850,849,847,845,843,841,840,839,836,835
  ,834,833,830,828,826,825,824,823,822,821,820,819,817,816,815,811,809,808,807
  ,806,801,800,798,797,796,793,791,790,789,787,785,784,782,781,778,775,774,773
  ,771,767,766,765,764,761,760,759,758,756,755,754,753,751,750,749,746,742,741
  ,740,736,735,734,733,732,728,727,723,721,720,719,718,716,714,713,711,710,709
  ,708,706,703,702,701,700,698,697,696,694,693,690,689,687,685,684,683,682,681
  ,679,678,677,676,675,674,673,672,671,670,667,664,663,661,659,658,657,655,653
  ,651,650,649,646,645,642,641,640,638,636,634,633,631,629,628,627,626,624,623
  ,622,619,618,615,614,613,612,611,610,609,607,606,605,604,603,599,598,596,595
  ,594,591,588,586,585,583,579,577,576,574,573,572,571,570,569,566,565,564,562
  ,561,560,559,555,554,553,552,549,548,547,545,544,542,541,540,539,537,536,535
  ,534,531,530,529,528,527,525,523,522,520,519,518,517,516,515,513,512,510,506
  ,505,503,501,500,499,496,495,494,493,492,491,488,485,484,481,480,479,477,476
  ,475,474,473,472,471,470,469,467,465,463,462,461,460,459,456,454,453,452,450
  ,449,448,446,445,444,443,442,441,437,436,435,434,432,431,429,426,424,423,421
  ,420,417,415,414,413,412,411,409,408,407,405,403,401,399,398,397,395,394,391
  ,389,388,387,386,385,383,381,380,379,378,377,376,375,374,373,372,370,369,368
  ,367,366,365,363,362,361,360,359,358,356,355,354,353,349,347,346,345,343,342
  ,341,340,339,335,334,333,332,331,330,329,328,327,326,325,323,322,321,320,319
  ,318,317,316,315,313,312,311,310,309,307,306,305,303,301,300,298,296,295,294
  ,292,291,290,289,284,281,280,279,277,274,273,268,267,266,265,264,263,262,260
  ,259,257,255,254,251,250,"

===============================================================================
All tests passed (128 assertions in 1 test case)

