
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
run_tests is a Catch v1.0 b11 host application.
Run with -? for options

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_double_hashing.cpp:6
...............................................................................

cluster_distribution_double_hashing.cpp:26: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_double_hashing.cpp:6
...............................................................................

cluster_distribution_double_hashing.cpp:50: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  497 == 497

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_double_hashing.cpp:6
...............................................................................

cluster_distribution_double_hashing.cpp:75: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  497 == 497

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_double_hashing.cpp:6
...............................................................................

cluster_distribution_double_hashing.cpp:100: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  497 == 497

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, linear probring
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_linear_probing.cpp:6
...............................................................................

cluster_distribution_linear_probing.cpp:26: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, linear probring
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_linear_probing.cpp:6
...............................................................................

cluster_distribution_linear_probing.cpp:50: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, linear probring
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_linear_probing.cpp:6
...............................................................................

cluster_distribution_linear_probing.cpp:75: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, linear probring
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_linear_probing.cpp:6
...............................................................................

cluster_distribution_linear_probing.cpp:100: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, quadratic probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_quadratic_probing.cpp:6
...............................................................................

cluster_distribution_quadratic_probing.cpp:26: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, quadratic probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_quadratic_probing.cpp:6
...............................................................................

cluster_distribution_quadratic_probing.cpp:50: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, quadratic probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_quadratic_probing.cpp:6
...............................................................................

cluster_distribution_quadratic_probing.cpp:75: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Verifying the output of cluster_distribution, quadratic probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The cluster_distribution reports a list of clusters which reflects
            the actual number of items in the map
-------------------------------------------------------------------------------
cluster_distribution_quadratic_probing.cpp:6
...............................................................................

cluster_distribution_quadratic_probing.cpp:100: 
PASSED:
  REQUIRE( cluster_item_count == map.size() )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:12: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:12: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:12: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled to capacity
      Then: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:19: 
PASSED:
  REQUIRE( map.search(2000, value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:30: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:30: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:30: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled to capacity
      Then: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:37: 
PASSED:
  REQUIRE( map.search(2000, value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:49: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:49: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:49: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled to capacity
      Then: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:57: 
PASSED:
  REQUIRE( map.search(std::to_string(2000), value) < 0 )
with expansion:
  -222 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:69: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:69: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:69: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled to capacity
      Then: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_double_hashing.cpp:4
...............................................................................

operation_failures_double_hashing.cpp:76: 
PASSED:
  REQUIRE( map.search(std::to_string(2000).c_str(), value) < 0 )
with expansion:
  -222 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled to capacity
      Then: Attempting to insert returns a negative value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.insert(5000, 5) < 0 )
with expansion:
  -1021 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled to capacity
       And: Attempting to remove a key that's not in the map returns a negative
            value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:23: 
PASSED:
  REQUIRE( map.remove(5000, value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled to capacity
       And: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:26: 
PASSED:
  REQUIRE( map.search(5000, value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:38: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:39: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:38: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:39: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:38: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:39: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with double keys
      When: The map is filled to capacity
      Then: Attempting to insert returns a negative value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:46: 
PASSED:
  REQUIRE( map.insert(5000, 5) < 0 )
with expansion:
  -1021 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:38: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:39: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with double keys
      When: The map is filled to capacity
       And: Attempting to remove a key that's not in the map returns a negative
            value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:49: 
PASSED:
  REQUIRE( map.remove(5000, value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:38: 
PASSED:
  REQUIRE( map.remove(5, value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:39: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with double keys
      When: The map is filled to capacity
       And: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:52: 
PASSED:
  REQUIRE( map.search(5000, value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:64: 
PASSED:
  REQUIRE( map.remove(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:65: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:64: 
PASSED:
  REQUIRE( map.remove(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:65: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:64: 
PASSED:
  REQUIRE( map.remove(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:65: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with string keys
      When: The map is filled to capacity
      Then: Attempting to insert returns a negative value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:73: 
PASSED:
  REQUIRE( map.insert(std::to_string(5000), 5) < 0 )
with expansion:
  -1021 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:64: 
PASSED:
  REQUIRE( map.remove(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:65: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with string keys
      When: The map is filled to capacity
       And: Attempting to remove a key that's not in the map returns a negative
            value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:76: 
PASSED:
  REQUIRE( map.remove(std::to_string(5000), value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:64: 
PASSED:
  REQUIRE( map.remove(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:65: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with string keys
      When: The map is filled to capacity
       And: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:79: 
PASSED:
  REQUIRE( map.search(std::to_string(5000), value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:91: 
PASSED:
  REQUIRE( map.remove(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:92: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:91: 
PASSED:
  REQUIRE( map.remove(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:92: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:91: 
PASSED:
  REQUIRE( map.remove(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:92: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled to capacity
      Then: Attempting to insert returns a negative value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:100: 
PASSED:
  REQUIRE( map.insert(std::to_string(5000).c_str(), 5) < 0 )
with expansion:
  -1021 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:91: 
PASSED:
  REQUIRE( map.remove(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:92: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled to capacity
       And: Attempting to remove a key that's not in the map returns a negative
            value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:103: 
PASSED:
  REQUIRE( map.remove(std::to_string(5000).c_str(), value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:91: 
PASSED:
  REQUIRE( map.remove(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

operation_failures_linear_probing.cpp:92: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
     Given: An HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled to capacity
       And: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_linear_probing.cpp:4
...............................................................................

operation_failures_linear_probing.cpp:106: 
PASSED:
  REQUIRE( map.search(std::to_string(5000).c_str(), value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:12: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:12: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:12: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled to capacity
      Then: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:19: 
PASSED:
  REQUIRE( map.search(2000, value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:30: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:30: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:30: 
PASSED:
  REQUIRE( map.search(5, value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled to capacity
      Then: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:37: 
PASSED:
  REQUIRE( map.search(2000, value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:49: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:49: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:49: 
PASSED:
  REQUIRE( map.search(std::to_string(5), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled to capacity
      Then: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:57: 
PASSED:
  REQUIRE( map.search(std::to_string(2000), value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:69: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:69: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:69: 
PASSED:
  REQUIRE( map.search(std::to_string(5).c_str(), value) == -1 )
with expansion:
  -1 == -1

-------------------------------------------------------------------------------
Scenario: Various operations fail and indicate as such with their return values
          , quadratic probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled to capacity
      Then: Attempting to search for a key that's not in the map returns a
            negative value
-------------------------------------------------------------------------------
operation_failures_quadratic_probing.cpp:4
...............................................................................

operation_failures_quadratic_probing.cpp:76: 
PASSED:
  REQUIRE( map.search(std::to_string(2000).c_str(), value) < 0 )
with expansion:
  -1022 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:20: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:21: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:20: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:21: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:26: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:20: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:21: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:30: 
PASSED:
  REQUIRE( map.search(50, value) > 0 )
with expansion:
  1 > 0

operation_successes_double_hashing.cpp:31: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_double_hashing.cpp:33: 
PASSED:
  REQUIRE( map.search(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_double_hashing.cpp:34: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_double_hashing.cpp:36: 
PASSED:
  REQUIRE( map.search(499, value) > 0 )
with expansion:
  1 > 0

operation_successes_double_hashing.cpp:37: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:20: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:21: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:48: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:67: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:68: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:67: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:68: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:73: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:67: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:68: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:77: 
PASSED:
  REQUIRE( map.search(2.5, value) > 0 )
with expansion:
  3 > 0

operation_successes_double_hashing.cpp:78: 
PASSED:
  REQUIRE( value == 6 )
with expansion:
  6 == 6

operation_successes_double_hashing.cpp:80: 
PASSED:
  REQUIRE( map.search(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_double_hashing.cpp:81: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:67: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:68: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:92: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  524 == 524

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:111: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:112: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:111: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:112: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:117: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:111: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:112: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:121: 
PASSED:
  REQUIRE( map.search("50", value) > 0 )
with expansion:
  2 > 0

operation_successes_double_hashing.cpp:122: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_double_hashing.cpp:124: 
PASSED:
  REQUIRE( map.search("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_double_hashing.cpp:125: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_double_hashing.cpp:127: 
PASSED:
  REQUIRE( map.search("499", value) > 0 )
with expansion:
  2 > 0

operation_successes_double_hashing.cpp:128: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:111: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:112: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:139: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  522 == 522

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:160: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:161: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:160: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:161: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:168: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:160: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:161: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:172: 
PASSED:
  REQUIRE( map.search("50", value) > 0 )
with expansion:
  2 > 0

operation_successes_double_hashing.cpp:173: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_double_hashing.cpp:175: 
PASSED:
  REQUIRE( map.search("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_double_hashing.cpp:176: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_double_hashing.cpp:178: 
PASSED:
  REQUIRE( map.search("499", value) > 0 )
with expansion:
  2 > 0

operation_successes_double_hashing.cpp:179: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:160: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_double_hashing.cpp:161: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with double hashing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_double_hashing.cpp:4
...............................................................................

operation_successes_double_hashing.cpp:190: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  522 == 522

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:25: 
PASSED:
  REQUIRE( map.size() == 500 )
with expansion:
  500 == 500

operation_successes_linear_probing.cpp:26: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:30: 
PASSED:
  REQUIRE( map.search(50, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:31: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:33: 
PASSED:
  REQUIRE( map.search(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:34: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:36: 
PASSED:
  REQUIRE( map.search(499, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:37: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:48: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:52: 
PASSED:
  REQUIRE( map.remove(50, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:53: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:55: 
PASSED:
  REQUIRE( map.remove(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:56: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:58: 
PASSED:
  REQUIRE( map.remove(499, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:59: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:52: 
PASSED:
  REQUIRE( map.remove(50, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:53: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:55: 
PASSED:
  REQUIRE( map.remove(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:56: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:58: 
PASSED:
  REQUIRE( map.remove(499, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:59: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:52: 
PASSED:
  REQUIRE( map.remove(50, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:53: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:55: 
PASSED:
  REQUIRE( map.remove(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:56: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:58: 
PASSED:
  REQUIRE( map.remove(499, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:59: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
      When: The removed keys are searched for...
      Then: ...via the search method, they are no longer found
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:63: 
PASSED:
  REQUIRE( map.search(50, value) < 0 )
with expansion:
  -1 < 0

operation_successes_linear_probing.cpp:64: 
PASSED:
  REQUIRE( map.search(0, value) < 0 )
with expansion:
  -1 < 0

operation_successes_linear_probing.cpp:65: 
PASSED:
  REQUIRE( map.search(499, value) < 0 )
with expansion:
  -1 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:52: 
PASSED:
  REQUIRE( map.remove(50, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:53: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:55: 
PASSED:
  REQUIRE( map.remove(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:56: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:58: 
PASSED:
  REQUIRE( map.remove(499, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:59: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
      When: The removed keys are searched for...
       And: ...via the remove method, they are no longer found
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:69: 
PASSED:
  REQUIRE( map.remove(50, value) < 0 )
with expansion:
  -1 < 0

operation_successes_linear_probing.cpp:70: 
PASSED:
  REQUIRE( map.remove(0, value) < 0 )
with expansion:
  -1 < 0

operation_successes_linear_probing.cpp:71: 
PASSED:
  REQUIRE( map.remove(499, value) < 0 )
with expansion:
  -1 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
  And when: A random item is removed from the map
      Then: The removed key should no longer be found in the map with via the
            search() function
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:80: 
PASSED:
  REQUIRE( map.search(removed_key, value) < 0 )
with expansion:
  -1 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:12: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:13: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:19: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:20: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
  And when: A random item is removed from the map
       And: The removed key should no longer be found in the map with via the
            remove() function
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:84: 
PASSED:
  REQUIRE( map.remove(removed_key, value) < 0 )
with expansion:
  -1 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:110: 
PASSED:
  REQUIRE( map.size() == 500 )
with expansion:
  500 == 500

operation_successes_linear_probing.cpp:111: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:115: 
PASSED:
  REQUIRE( map.search(2.5, value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:116: 
PASSED:
  REQUIRE( value == 6 )
with expansion:
  6 == 6

operation_successes_linear_probing.cpp:118: 
PASSED:
  REQUIRE( map.search(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:119: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:130: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:134: 
PASSED:
  REQUIRE( map.remove(2.5, value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:135: 
PASSED:
  REQUIRE( value == 6 )
with expansion:
  6 == 6

operation_successes_linear_probing.cpp:137: 
PASSED:
  REQUIRE( map.remove(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:138: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:134: 
PASSED:
  REQUIRE( map.remove(2.5, value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:135: 
PASSED:
  REQUIRE( value == 6 )
with expansion:
  6 == 6

operation_successes_linear_probing.cpp:137: 
PASSED:
  REQUIRE( map.remove(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:138: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:134: 
PASSED:
  REQUIRE( map.remove(2.5, value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:135: 
PASSED:
  REQUIRE( value == 6 )
with expansion:
  6 == 6

operation_successes_linear_probing.cpp:137: 
PASSED:
  REQUIRE( map.remove(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:138: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
      When: The removed keys are searched for...
      Then: ...via the search method, they are no longer found
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:143: 
PASSED:
  REQUIRE( map.search(2.5, value) < 0 )
with expansion:
  -3 < 0

operation_successes_linear_probing.cpp:144: 
PASSED:
  REQUIRE( map.search(0, value) < 0 )
with expansion:
  -5 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:134: 
PASSED:
  REQUIRE( map.remove(2.5, value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:135: 
PASSED:
  REQUIRE( value == 6 )
with expansion:
  6 == 6

operation_successes_linear_probing.cpp:137: 
PASSED:
  REQUIRE( map.remove(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:138: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
      When: The removed keys are searched for...
       And: ...via the remove method, they are no longer found
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:148: 
PASSED:
  REQUIRE( map.remove(2.5, value) < 0 )
with expansion:
  -3 < 0

operation_successes_linear_probing.cpp:149: 
PASSED:
  REQUIRE( map.remove(0, value) < 0 )
with expansion:
  -5 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
  And when: A random item is removed from the map
      Then: The removed key should no longer be found in the map with via the
            search() function
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:158: 
PASSED:
  REQUIRE( map.search(removed_key, value) < 0 )
with expansion:
  -229 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:97: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:98: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
  And when: A random item is removed from the map
       And: The removed key should no longer be found in the map with via the
            remove() function
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:162: 
PASSED:
  REQUIRE( map.remove(removed_key, value) < 0 )
with expansion:
  -50 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:188: 
PASSED:
  REQUIRE( map.size() == 500 )
with expansion:
  500 == 500

operation_successes_linear_probing.cpp:189: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:193: 
PASSED:
  REQUIRE( map.search("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:194: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:196: 
PASSED:
  REQUIRE( map.search("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:197: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:199: 
PASSED:
  REQUIRE( map.search("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:200: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:211: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:215: 
PASSED:
  REQUIRE( map.remove("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:216: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:218: 
PASSED:
  REQUIRE( map.remove("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:219: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:221: 
PASSED:
  REQUIRE( map.remove("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:222: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:215: 
PASSED:
  REQUIRE( map.remove("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:216: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:218: 
PASSED:
  REQUIRE( map.remove("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:219: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:221: 
PASSED:
  REQUIRE( map.remove("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:222: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:215: 
PASSED:
  REQUIRE( map.remove("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:216: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:218: 
PASSED:
  REQUIRE( map.remove("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:219: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:221: 
PASSED:
  REQUIRE( map.remove("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:222: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
      When: The removed keys are searched for...
      Then: ...via the search method, they are no longer found
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:226: 
PASSED:
  REQUIRE( map.search("50", value) < 0 )
with expansion:
  -4 < 0

operation_successes_linear_probing.cpp:227: 
PASSED:
  REQUIRE( map.search("0", value) < 0 )
with expansion:
  -28 < 0

operation_successes_linear_probing.cpp:228: 
PASSED:
  REQUIRE( map.search("499", value) < 0 )
with expansion:
  -7 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:215: 
PASSED:
  REQUIRE( map.remove("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:216: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:218: 
PASSED:
  REQUIRE( map.remove("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:219: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:221: 
PASSED:
  REQUIRE( map.remove("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:222: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
      When: The removed keys are searched for...
       And: ...via the remove method, they are no longer found
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:232: 
PASSED:
  REQUIRE( map.remove("50", value) < 0 )
with expansion:
  -4 < 0

operation_successes_linear_probing.cpp:233: 
PASSED:
  REQUIRE( map.remove("0", value) < 0 )
with expansion:
  -28 < 0

operation_successes_linear_probing.cpp:234: 
PASSED:
  REQUIRE( map.remove("499", value) < 0 )
with expansion:
  -7 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
  And when: A random item is removed from the map
      Then: The removed key should no longer be found in the map with via the
            search() function
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:243: 
PASSED:
  REQUIRE( map.search(removed_key, value) < 0 )
with expansion:
  -1 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:175: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:176: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:182: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:183: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
  And when: A random item is removed from the map
       And: The removed key should no longer be found in the map with via the
            remove() function
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:247: 
PASSED:
  REQUIRE( map.remove(removed_key, value) < 0 )
with expansion:
  -22 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:277: 
PASSED:
  REQUIRE( map.size() == 500 )
with expansion:
  500 == 500

operation_successes_linear_probing.cpp:278: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:282: 
PASSED:
  REQUIRE( map.search("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:283: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:284: 
PASSED:
  REQUIRE( map.search("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:285: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:287: 
PASSED:
  REQUIRE( map.search("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:288: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:299: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:303: 
PASSED:
  REQUIRE( map.remove("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:304: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:306: 
PASSED:
  REQUIRE( map.remove("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:307: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:309: 
PASSED:
  REQUIRE( map.remove("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:310: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:303: 
PASSED:
  REQUIRE( map.remove("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:304: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:306: 
PASSED:
  REQUIRE( map.remove("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:307: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:309: 
PASSED:
  REQUIRE( map.remove("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:310: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:303: 
PASSED:
  REQUIRE( map.remove("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:304: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:306: 
PASSED:
  REQUIRE( map.remove("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:307: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:309: 
PASSED:
  REQUIRE( map.remove("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:310: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
      When: The removed keys are searched for...
      Then: ...via the search method, they are no longer found
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:314: 
PASSED:
  REQUIRE( map.search("50", value) < 0 )
with expansion:
  -4 < 0

operation_successes_linear_probing.cpp:315: 
PASSED:
  REQUIRE( map.search("0", value) < 0 )
with expansion:
  -28 < 0

operation_successes_linear_probing.cpp:316: 
PASSED:
  REQUIRE( map.search("499", value) < 0 )
with expansion:
  -7 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:303: 
PASSED:
  REQUIRE( map.remove("50", value) > 0 )
with expansion:
  4 > 0

operation_successes_linear_probing.cpp:304: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_linear_probing.cpp:306: 
PASSED:
  REQUIRE( map.remove("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_linear_probing.cpp:307: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_linear_probing.cpp:309: 
PASSED:
  REQUIRE( map.remove("499", value) > 0 )
with expansion:
  7 > 0

operation_successes_linear_probing.cpp:310: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Removing a key known to be in the map should return its expected
            value
      When: The removed keys are searched for...
       And: ...via the remove method, they are no longer found
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:320: 
PASSED:
  REQUIRE( map.remove("50", value) < 0 )
with expansion:
  -4 < 0

operation_successes_linear_probing.cpp:321: 
PASSED:
  REQUIRE( map.remove("0", value) < 0 )
with expansion:
  -28 < 0

operation_successes_linear_probing.cpp:322: 
PASSED:
  REQUIRE( map.remove("499", value) < 0 )
with expansion:
  -7 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
      When: A random item is removed from the map
      Then: The removed key should no longer be found in the map with via the
            search() function
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:330: 
PASSED:
  REQUIRE( map.search(removed_key, value) < 0 )
with expansion:
  -5 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:260: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:261: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:269: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_linear_probing.cpp:270: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with linear probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
      When: A random item is removed from the map
       And: The removed key should no longer be found in the map with via the
            remove() function
-------------------------------------------------------------------------------
operation_successes_linear_probing.cpp:4
...............................................................................

operation_successes_linear_probing.cpp:334: 
PASSED:
  REQUIRE( map.remove(removed_key, value) < 0 )
with expansion:
  -1 < 0

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:20: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:21: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:20: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:21: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:26: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:20: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:21: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:30: 
PASSED:
  REQUIRE( map.search(50, value) > 0 )
with expansion:
  1 > 0

operation_successes_quadratic_probing.cpp:31: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_quadratic_probing.cpp:33: 
PASSED:
  REQUIRE( map.search(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_quadratic_probing.cpp:34: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_quadratic_probing.cpp:36: 
PASSED:
  REQUIRE( map.search(499, value) > 0 )
with expansion:
  1 > 0

operation_successes_quadratic_probing.cpp:37: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:13: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:14: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:20: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:21: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with integer keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:48: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:67: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:68: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:67: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:68: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:73: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:67: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:68: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:77: 
PASSED:
  REQUIRE( map.search(2.5, value) > 0 )
with expansion:
  3 > 0

operation_successes_quadratic_probing.cpp:78: 
PASSED:
  REQUIRE( value == 6 )
with expansion:
  6 == 6

operation_successes_quadratic_probing.cpp:80: 
PASSED:
  REQUIRE( map.search(0, value) > 0 )
with expansion:
  1 > 0

operation_successes_quadratic_probing.cpp:81: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:60: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:61: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:67: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:68: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with double keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:92: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:111: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:112: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:111: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:112: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:117: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:111: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:112: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:121: 
PASSED:
  REQUIRE( map.search("50", value) > 0 )
with expansion:
  3 > 0

operation_successes_quadratic_probing.cpp:122: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_quadratic_probing.cpp:124: 
PASSED:
  REQUIRE( map.search("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_quadratic_probing.cpp:125: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_quadratic_probing.cpp:127: 
PASSED:
  REQUIRE( map.search("499", value) > 0 )
with expansion:
  3 > 0

operation_successes_quadratic_probing.cpp:128: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:104: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:105: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:111: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:112: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with string keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:139: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:158: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:159: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:158: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:159: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
      Then: The map reports itself as non-empty
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:164: 
PASSED:
  REQUIRE( ! map.is_empty() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:158: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:159: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Searching for a key known to be in the map should return its
            expected value
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:168: 
PASSED:
  REQUIRE( map.search("50", value) > 0 )
with expansion:
  3 > 0

operation_successes_quadratic_probing.cpp:169: 
PASSED:
  REQUIRE( value == 51 )
with expansion:
  51 == 51

operation_successes_quadratic_probing.cpp:171: 
PASSED:
  REQUIRE( map.search("0", value) > 0 )
with expansion:
  1 > 0

operation_successes_quadratic_probing.cpp:172: 
PASSED:
  REQUIRE( value == 1 )
with expansion:
  1 == 1

operation_successes_quadratic_probing.cpp:174: 
PASSED:
  REQUIRE( map.search("499", value) > 0 )
with expansion:
  3 > 0

operation_successes_quadratic_probing.cpp:175: 
PASSED:
  REQUIRE( value == 500 )
with expansion:
  500 == 500

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:151: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:152: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:158: 
PASSED:
  REQUIRE( map.size() == 0 )
with expansion:
  0 == 0

operation_successes_quadratic_probing.cpp:159: 
PASSED:
  REQUIRE( map.is_empty() == true )
with expansion:
  true == true

-------------------------------------------------------------------------------
Scenario: Certain basic operations should always succeed, with quadratic
          probing
     Given: A HashMapOpenAddressingGeneric map with const char* keys
      When: The map is filled halfway, cleared, then filled halfway again
       And: Printing the map produces a realistic picture of its structure
-------------------------------------------------------------------------------
operation_successes_quadratic_probing.cpp:4
...............................................................................

operation_successes_quadratic_probing.cpp:186: 
PASSED:
  REQUIRE( num_empty_slots == map.capacity() - map.size() )
with expansion:
  521 == 521

===============================================================================
All tests passed (636 assertions in 9 test cases)

