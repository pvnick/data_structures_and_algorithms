BEGIN{Ei=5.33119589612055122529; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06123757614620028988; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=51.05386341776210201715; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.85315806348188516495; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.33119589612055122529; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06123757614620028988; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=51.05386341776210201715; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.85315806348188516495; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.33119589612055122529; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06123757614620028988; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=51.05386341776210201715; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.85315806348188516495; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.33119589612055122529; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06123757614620028988; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=51.05386341776210201715; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.85315806348188516495; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.28599412340842178537; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.23828125000000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=16628}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99981961397390417545; chi_square=0; num_clusters=0; capacity=16631}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99537231804795922585; chi_square=0; num_clusters=0; capacity=2377}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67612735331191797794; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.40045469308216929960; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50774069437234725655; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50744628906250000000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06254580991937430667; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05957031250000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87207702888583327194; chi_square=0; num_clusters=0; capacity=727}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.62288686605981880007; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.75912408759124261337; chi_square=0; num_clusters=0; capacity=137}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.15544041450777257296; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.42231075697211117870; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.17968750000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=3118}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76178841925238216515; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.76123046875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.94432071269487760645; chi_square=0; num_clusters=0; capacity=449}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.12573673870334012292; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.08984375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.50690944561859863082; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.05461638491547482488; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.40646425073457415067; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.37011718750000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=12667}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968431852261063764; chi_square=0; num_clusters=0; capacity=12671}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77327391490141017538; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.77313232421875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99447818884594152422; chi_square=0; num_clusters=0; capacity=1811}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.21235899950956316218; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.18505859375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.51506526247306139155; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.11399805131536222547; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.74147217235188378481; chi_square=0; num_clusters=0; capacity=557}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=16.47204161248374632009; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.95768573521035094132; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=159237}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99968610118842093915; chi_square=0; num_clusters=0; capacity=159287}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.80990066780935132673; chi_square=0; num_clusters=0; capacity=196613}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.99912091776185629755; chi_square=0; num_clusters=0; capacity=22751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47489122921156390333; chi_square=0; num_clusters=0; capacity=24593}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60744094848632812500; chi_square=0; num_clusters=0; capacity=262144}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.60732742674289552642; chi_square=0; num_clusters=0; capacity=262193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.86234694189135563391; chi_square=0; num_clusters=0; capacity=32749}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.85952758789062500000; chi_square=0; num_clusters=0; capacity=32768}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.92169281704332917116; chi_square=0; num_clusters=0; capacity=6947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.44048345745330408363; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=19.43811035156250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72414354300594030445; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.96867658574784609726; chi_square=0; num_clusters=0; capacity=1277}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.76733635774465369650; chi_square=0; num_clusters=0; capacity=1543}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54325132775776818761; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.54315185546875000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.36439431093673402273; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.34521484375000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.87660668380462780647; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.48330058939096431914; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=17.38085937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=8899}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99731032164070376744; chi_square=0; num_clusters=0; capacity=8923}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.33119589612055122529; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06123757614620028988; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=51.05386341776210201715; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.85315806348188516495; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.33119589612055122529; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06123757614620028988; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=51.05386341776210201715; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.85315806348188516495; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.33119589612055122529; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06123757614620028988; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=51.05386341776210201715; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.85315806348188516495; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.33119589612055122529; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99967938441808268379; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.06123757614620028988; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=51.05386341776210201715; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.85315806348188516495; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
