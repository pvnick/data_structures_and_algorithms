BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=-nan; chi_square=0; num_clusters=0; capacity=}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99945999459994594449; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99928012237919550120; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90365367401741392150; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95366311834690087323; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67791954093156703287; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67779541015625000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44629720451201571052; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42236328125000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60669048392335156450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.80287474332648756103; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.81728880157170991083; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.68945312500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44083224967490330926; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.93078930789307889881; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.93062179429496982852; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.84156562779721699741; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47589229805886024138; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.63134118796166294185; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.63122558593750000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.07209416380578748118; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.04980468750000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.35888275414095494042; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.23613963039014507217; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.31827111984283007473; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.19921875000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.61650616506165056840; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.61639521281382170237; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.55740906501749531987; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.28929242329367532705; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.41816738904828765211; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.41809082031250000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.35948994605198647534; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.34472656250000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.22474829490094183626; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.06570841889116962875; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.45776031434184716318; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.37890625000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=8.90767230169050705513; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99945999459994594449; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99928012237919550120; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90365367401741392150; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95366311834690087323; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67791954093156703287; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67779541015625000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44629720451201571052; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42236328125000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60669048392335156450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.80287474332648756103; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.81728880157170991083; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.68945312500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44083224967490330926; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.93078930789307889881; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.93062179429496982852; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.84156562779721699741; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47589229805886024138; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.63134118796166294185; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.63122558593750000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.07209416380578748118; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.04980468750000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.35888275414095494042; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.23613963039014507217; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.31827111984283007473; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.19921875000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.61650616506165056840; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.61639521281382170237; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.55740906501749531987; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.28929242329367532705; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.41816738904828765211; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.41809082031250000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.35948994605198647534; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.34472656250000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.22474829490094183626; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.06570841889116962875; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.45776031434184716318; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.37890625000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=8.90767230169050705513; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99945999459994594449; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99928012237919550120; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90365367401741392150; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95366311834690087323; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67791954093156703287; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67779541015625000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44629720451201571052; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42236328125000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60669048392335156450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.80287474332648756103; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.81728880157170991083; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.68945312500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44083224967490330926; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.93078930789307889881; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.93062179429496982852; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.84156562779721699741; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47589229805886024138; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.63134118796166294185; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.63122558593750000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.07209416380578748118; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.04980468750000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.35888275414095494042; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.23613963039014507217; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.31827111984283007473; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.19921875000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.61650616506165056840; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.61639521281382170237; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.55740906501749531987; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.28929242329367532705; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.41816738904828765211; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.41809082031250000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.35948994605198647534; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.34472656250000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.22474829490094183626; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.06570841889116962875; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.45776031434184716318; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.37890625000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=8.90767230169050705513; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.13712047012732586637; chi_square=0; num_clusters=0; capacity=1021}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.12207031250000000000; chi_square=0; num_clusters=0; capacity=1024}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.90393013100436547802; chi_square=0; num_clusters=0; capacity=229}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.89641434262948038736; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.48828125000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.48329048843187649709; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=5245}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99695875308876635845; chi_square=0; num_clusters=0; capacity=5261}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.85270687693058044854; chi_square=0; num_clusters=0; capacity=6151}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98402130492676409546; chi_square=0; num_clusters=0; capacity=751}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.82054616384915490812; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64033695519472588753; chi_square=0; num_clusters=0; capacity=8191}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.64025878906250000000; chi_square=0; num_clusters=0; capacity=8192}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.96875000000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=1788}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99944102850754612533; chi_square=0; num_clusters=0; capacity=1789}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87690044139283962465; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.87304687500000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=7.12350597609561742019; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.98437500000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95719844357976668903; chi_square=0; num_clusters=0; capacity=257}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.58070802208509253450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.59640102827763463722; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.51277013752455813389; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.63291139240506311126; chi_square=0; num_clusters=0; capacity=79}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.43298969072164794625; chi_square=0; num_clusters=0; capacity=97}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.49618320610687050021; chi_square=0; num_clusters=0; capacity=131}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=15.26943005181347068344; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.74103585657370452111; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=11.51171875000000000000; chi_square=0; num_clusters=0; capacity=256}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2947}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99796816796478160505; chi_square=0; num_clusters=0; capacity=2953}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.95712893796687237291; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.72000977278279987281; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.71948242187500000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.83758700696055665702; chi_square=0; num_clusters=0; capacity=431}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.78978388998035331525; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.75585937500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.83224967490247081514; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99945999459994594449; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99928012237919550120; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90365367401741392150; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95366311834690087323; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67791954093156703287; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67779541015625000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44629720451201571052; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42236328125000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60669048392335156450; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.80287474332648756103; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.81728880157170991083; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.68945312500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44083224967490330926; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.93078930789307889881; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.93062179429496982852; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.84156562779721699741; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.47589229805886024138; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.63134118796166294185; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.63122558593750000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.07209416380578748118; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.04980468750000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.35888275414095494042; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.23613963039014507217; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.31827111984283007473; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=20.19921875000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.61650616506165056840; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.61639521281382170237; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.55740906501749531987; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.28929242329367532705; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.41816738904828765211; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.41809082031250000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.35948994605198647534; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.34472656250000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.22474829490094183626; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.06570841889116962875; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.45776031434184716318; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=13.37890625000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=8.90767230169050705513; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=11111}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99982003059479884755; chi_square=0; num_clusters=0; capacity=11113}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.90414191553421763281; chi_square=0; num_clusters=0; capacity=12289}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.95742016280525987781; chi_square=0; num_clusters=0; capacity=1597}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67828581893657280411; chi_square=0; num_clusters=0; capacity=16381}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.67816162109375000000; chi_square=0; num_clusters=0; capacity=16384}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.44923982344286450541; chi_square=0; num_clusters=0; capacity=2039}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=5.42529296875000000000; chi_square=0; num_clusters=0; capacity=2048}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.60863916856122113330; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.81519507186858319869; chi_square=0; num_clusters=0; capacity=487}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.82907662082514832491; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=21.70117187500000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=14.44863459037711272970; chi_square=0; num_clusters=0; capacity=769}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=22.66019417475728303657; chi_square=0; num_clusters=0; capacity=103}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=18.23437500000000000000; chi_square=0; num_clusters=0; capacity=128}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=12.09326424870466354378; chi_square=0; num_clusters=0; capacity=193}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.00000000000000000000; chi_square=0; num_clusters=0; capacity=2334}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.99786233433091064970; chi_square=0; num_clusters=0; capacity=2339}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=9.29880478087649464669; chi_square=0; num_clusters=0; capacity=251}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.75803832413121141620; chi_square=0; num_clusters=0; capacity=3079}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.92581602373887239565; chi_square=0; num_clusters=0; capacity=337}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=6.00000000000000000000; chi_square=0; num_clusters=0; capacity=389}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57024187637429757380; chi_square=0; num_clusters=0; capacity=4093}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.56982421875000000000; chi_square=0; num_clusters=0; capacity=4096}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.58546168958742672572; chi_square=0; num_clusters=0; capacity=509}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=4.55859375000000000000; chi_square=0; num_clusters=0; capacity=512}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56043603719140744346; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.31580634818852182377; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.19621673613337620168; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56043603719140744346; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.31580634818852182377; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.19621673613337620168; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56043603719140744346; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.31580634818852182377; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.19621673613337620168; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=1.68162872715613986863; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.57326066046809875942; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.94485411991022760780; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56043603719140744346; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.31580634818852182377; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=2.19621673613337620168; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=3.56235973068291134069; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
BEGIN{Ei=0.74831676819493431196; chi_square=0; num_clusters=0; capacity=3119}
        {
            cluster_size = $1
            num_instances = $2
            for (i = 1; i <= num_instances; i++) {
                Oi = cluster_size
                chi_square += (Oi - Ei) ^ 2 / Ei
                num_clusters++
            }
        }END{
            #the above only accounted for occupied slots, but we must also account for unoccupied slots (ie Oi=0)
            unoccupied_slots=capacity-num_clusters
            chi_square += num_clusters * Ei
            printf("%.20f", chi_square)
        }
